/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.protocol.propose

import io.sarl.acl.message.AclMessage
import io.sarl.acl.message.Performative
import io.sarl.acl.protocol.ProtocolResult
import io.sarl.acl.protocol.ProtocolState
import java.text.MessageFormat

/**
 * Participant side of the Propose Interaction protocol.
 *
 * <center><img src="./doc-files/sequence.png"></center>
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $Groupid$
 * @mavenartifactid $ArtifactId$
 * @see <a href="http://www.fipa.org/specs/fipa00036/SC00036H.html">FIPA Propose
 *      Interaction Protocol Specification</a>
 */
behavior ParticipantFipaProposeProtocol extends FipaProposeProtocol {

	var proposeData : ProtocolResult

	final override isInitiatorSide : boolean {
		false
	}

	final override isParticipantSide : boolean {
		true
	}

	/**
	 * At any point in the IP, the receiver of a communication 
	 * can inform the sender that it did not understand what was communicated.
	 * 
	 * The communication of a not-understood within an interaction protocol may terminate the entire IP 
	 * and termination of the interaction may imply that any commitments made during the interaction 
	 * are null and void.
	 * 
	 * @param reason the reason of the cancel.
	 */
	def notUnderstood(reason : Object = null) {
		notUnderstoodProtocol(reason)
	}

	/** Replies the proposal.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	def getPropose : ProtocolResult {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			if (this.numberOfErrors === 0) {
				return this.proposeData
			}
		} finally {
			rlock.unlock
		}
		reportError(Messages::ParticipantFipaProposeProtocol_0)
		return null
	}

	/** Accept a propose.
	 * 
	 * @param agreementInformation any useful agreement information to provide to the initiator.
	 */
	def accept(agreementInformation : Object = null) {
		val rlock = this.lock.readLock
		rlock.lock
		var st : ProtocolState
		try {
			st = this.state
		} finally {
			rlock.unlock
		}
		if (st == ProposeProtocolState::BUILDING_ANSWER) {
			val wlock = this.lock.writeLock
			wlock.lock
			try {
				st = this.state
				if (st == ProposeProtocolState::BUILDING_ANSWER) {
					ProposeProtocolState::ACCEPT_PROPOSE.finish(null)
					sendMessage(agreementInformation, Performative::ACCEPT_PROPOSAL, this.initiator)
				} else {
					reportError(MessageFormat::format(Messages::ParticipantFipaProposeProtocol_2, state.name))			
				}
			} finally {
				wlock.unlock
			}
		} else {
			reportError(MessageFormat::format(Messages::ParticipantFipaProposeProtocol_2, state.name))			
		}
	}

	/** Reject a propose.
	 * 
	 * @param disagreementInformation any useful agreement information to provide to the initiator.
	 */
	def reject(disagreementInformation : Object = null) {
		val rlock = this.lock.readLock
		rlock.lock
		var st : ProtocolState
		try {
			st = this.state
		} finally {
			rlock.unlock
		}
		if (st == ProposeProtocolState::BUILDING_ANSWER) {
			val wlock = this.lock.writeLock
			wlock.lock
			try {
				st = this.state
				if (st == ProposeProtocolState::BUILDING_ANSWER) {
					ProposeProtocolState::REJECT_PROPOSE.finish(null)
					sendMessage(disagreementInformation, Performative::REJECT_PROPOSAL, this.initiator)
				} else {
					reportError(MessageFormat::format(Messages::ParticipantFipaProposeProtocol_3, state.name))			
				}
			} finally {
				wlock.unlock
			}
		} else {
			reportError(MessageFormat::format(Messages::ParticipantFipaProposeProtocol_3, state.name))			
		}
	}

	@SuppressWarnings("potential_field_synchronization_problem", "discouraged_occurrence_readonly_use")
	on AclMessage [!hasFailed] {
		switch (occurrence.performative) {
			case Performative::PROPOSE: {
				val data = getPropose
				if (data === null) {
					val wlock = this.lock.writeLock
					wlock.lock
					try {
						this.proposeData = new ProtocolResult(occurrence.sender, Performative::PROPOSE, occurrence.content.content)
						this.conversationId = occurrence.conversationId
						this.initiator = occurrence.sender
						ProposeProtocolState::BUILDING_ANSWER.change(new ProposeArrived(this))
						startTimeoutNotifier
					} finally {
						wlock.unlock
					}
				} else {
					reportError(Messages::ParticipantFipaProposeProtocol_1)
				}
			}
			default: {
				reportUnpexectedPerformativeError(occurrence.performative)
			}
		}
	}

}
