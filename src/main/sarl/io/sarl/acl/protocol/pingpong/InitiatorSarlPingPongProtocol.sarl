/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.protocol.pingpong

import io.sarl.acl.message.AclMessage
import io.sarl.acl.message.Performative
import io.sarl.acl.protocol.ProtocolResult
import io.sarl.acl.protocol.ProtocolState
import java.text.MessageFormat
import java.util.UUID
import java.util.Map

/**
 * Initiator side of the Ping-Pong Interaction protocol.
 *
 * <center><img src="./doc-files/poingpong.png"></center>
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $Groupid$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
behavior InitiatorSarlPingPongProtocol extends SarlPingPongProtocol {

	var resultData : ProtocolResult

	@SuppressWarnings("potential_field_synchronization_problem")
	protected override onCancelled {
		this.resultData = null
	}
	
	final override isInitiatorSide : boolean {
		true
	}

	final override isParticipantSide : boolean {
		false
	}

	/**
	 * At any point in the IP, the initiator of the IP may cancel the
	 * interaction protocol.
	 * 
	 * <p>The semantics of cancel should roughly be interpreted as meaning that the
	 * initiator is no longer interested in continuing the interaction and that
	 * it should be terminated in a manner acceptable to both the Initiator and
	 * the Participant.
	 * 
	 * @param reason the reason of the cancel.
	 * @param reasonParameters is the map that contains the {@code language} used for expressing the given content;
	 *     the {@code ontology} associated to the given content; and the {@code encoding} of the message content.
	 */
	def cancel(reason : Object = null, reasonParameters : Map<String,String> = null) {
		cancelProtocol(reason, reasonParameters, null)
	}

	/**
	 * Send the ping-message. This method must be called by the
	 * initiator.
	 * 
	 * @param participant the participant to request to.
	 * @param pingDescription the content of the message.
	 * @param descriptionParameters is the map that contains the {@code language} used for expressing the given content;
	 *     the {@code ontology} associated to the given content; and the {@code encoding} of the message content.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	def ping(participant : UUID = null, pingDescription : Object, descriptionParameters : Map<String, String> = null) {
		if (participant !== null) {
			participant.initiateAsInitiator
		}
		val part = this.participant
		if (part === null) {
			reportError("Unspecified participant identifier")
		} else {
			val rlock = this.lock.readLock
			rlock.lock
			var st : ProtocolState
			try {
				st = this.state
			} finally {
				rlock.unlock
			}
			if (st == PingPongProtocolState::NOT_STARTED) {
				val wlock = this.lock.writeLock
				wlock.lock
				try {
					st = this.state
					if (st == PingPongProtocolState::NOT_STARTED) {
						this.resultData = null
						startTimeoutNotifier
						PingPongProtocolState::WAITING_ANSWER.change(null)
						sendMessage(pingDescription, Performative::PROPOSE,
							descriptionParameters?.get('language'),
							descriptionParameters?.get('ontology'),
							descriptionParameters?.get('encoding'),
							part)
					} else {
						reportError(MessageFormat::format("Cannot send a sarl-ping message in state {0}", state.name))
					}
				} finally {
					wlock.unlock
				}
			} else {
				reportError(MessageFormat::format("Cannot send a sarl-ping message in state {0}", state.name))
			}
		}
	}

	/**
	 * Replies the answer of the participant to the ping.
	 * 
	 * @return the answer (Performative + Content) or {@code null} if no answer.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	def getAnswer : ProtocolResult {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			if (this.state == PingPongProtocolState::PONG_RECEIVED) {
				return this.resultData
			}
		} finally {
			rlock.unlock
		}
		return null
	}

	@SuppressWarnings("potential_field_synchronization_problem", "discouraged_occurrence_readonly_use")
	on AclMessage [isStarted && !hasFailed] {
		val st = getState
		if (st == PingPongProtocolState::WAITING_ANSWER) {
			switch (occurrence.performative) {
				case AGREE: {
					val wlock = this.lock.writeLock
					wlock.lock
					try {
						this.resultData = new ProtocolResult(occurrence.sender, occurrence.performative, occurrence.content.content)
						finish(PingPongProtocolState::PONG_RECEIVED, new PongReceived(this))
					} finally {
						wlock.unlock
					}
				}
				default: {
					occurrence.performative.reportUnpexectedPerformativeError
				}
			}
		} else {
			reportError(MessageFormat::format("Cannot handle a participant message {0} in state {1}",
				occurrence.performative.name,
				st.name))
		}
	}

}
