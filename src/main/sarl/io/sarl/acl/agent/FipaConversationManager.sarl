/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.^agent

import io.sarl.acl.message.ACLMessage
import io.sarl.acl.protocol.EnumFipaProtocol
import io.sarl.acl.protocol.FipaProtocol
import io.sarl.acl.protocol.ProtocolState
import io.sarl.acl.protocol.request.InitiatorFipaRequestProtocol
import io.sarl.acl.protocol.request.ParticipantFipaRequestProtocol
import io.sarl.core.Behaviors
import io.sarl.core.Logging
import java.text.MessageFormat
import java.util.UUID

/** 
 * Conversation Manager for FIPA protocols.
 * <p>
 * This class lets the agent manage its conversations using protocols.
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $Groupid$
 * @mavenartifactid $ArtifactId$
 */
skill FipaConversationManager implements ConversationManager {

	uses Logging, Behaviors

	protected def buildParticipantProtocol(protocolType : EnumFipaProtocol) : FipaProtocol {
		switch (protocolType) {
			case FIPA_REQUEST: {
				return new ParticipantFipaRequestProtocol(this.owner)
			}
			default: {
				error(MessageFormat::format("Unsupported type of protocol for participant: {0}", protocolType.fipaName))
				return null
			}
		}
	}

	protected def buildInitiatorProtocol(protocolType : EnumFipaProtocol) : FipaProtocol {
		switch (protocolType) {
			case FIPA_REQUEST: {
				return new InitiatorFipaRequestProtocol(this.owner)
			}
			default: {
				error(MessageFormat::format("Unsupported type of protocol for initiator: {0}", protocolType.fipaName))
				return null
			}
		}
	}
	
	def createConversationAsParticipant(protocolType : EnumFipaProtocol, name : String = null) : FipaProtocol {
		var protocol = protocolType.buildParticipantProtocol
		if (protocol !== null) {
			protocol.name = name
			protocol.registerBehavior
		} 
		return protocol
	}

	def createConversationAsInitiator(protocolType : EnumFipaProtocol, name : String = null) : FipaProtocol {
		var protocol = protocolType.buildInitiatorProtocol
		if (protocol !== null) {
			protocol.name = name
			protocol.registerBehavior
		}
		return protocol
	}

	def createConversationAsParticipantFromMessage(message : ACLMessage) : FipaProtocol {
		if (message !== null) {
			createConversationAsParticipant(message.protocol)
			wake(message)
		}
		return null
	}

	def getConversation(conversationId : UUID) : FipaProtocol {
		return conversations.findFirst [it.conversationID == conversationId]
	}
	
	protected def unregister(protocol : FipaProtocol) {
		protocol.unregisterBehavior
	}
	
	def removeConversations(state : ProtocolState) {
		var removables = <FipaProtocol>newArrayList(conversations.filter [it.state == state])
		for (conversation : removables) {
			conversation.unregister
		}
	}

	def removeConversation(conversationId : UUID) : FipaProtocol {
		var conversation = conversationId.conversation
		if (conversation !== null) {
			conversation.unregister
			return conversation
		}
		return null
	}

	def getConversations : Iterable<FipaProtocol> {
		registeredBehaviors.filter(typeof(FipaProtocol))
	}
	
}
