/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.protocol

import io.sarl.acl.protocol.AclProtocolId
import io.sarl.acl.protocol.DefaultAclProtocolFactory
import io.sarl.core.AgentTask
import io.sarl.core.Schedules
import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Agent
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Skill
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.util.ConcurrentSet
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.EnumSource

import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("DefaultAclProtocolFactory")
class DefaultAclProtocolFactoryTest {

	var owner : MockableAgent

	var factory : DefaultAclProtocolFactory

	@PrivateAPI(isCallerOnly = true)
	@SuppressWarnings("use_reserved_sarl_annotation")
	@BeforeEach
	def setUp : void {
		this.owner = new MockableAgent
		var schedulesCapacity = new MockableSchedulesSkill
		SREutils::setInternalSkill(this.owner, schedulesCapacity, #[typeof(Schedules)])
		this.factory = new DefaultAclProtocolFactory
	}

	@ParameterizedTest
	@EnumSource(typeof(AclProtocolId))
	def newProtocolAsParticipant(id : AclProtocolId) : void {
		val uid = UUID::randomUUID
		val protocol = this.factory.newProtocolAsParticipant(this.owner, id, uid)
		if (id == AclProtocolId::NONE) {
			protocol.assertNull
		} else {
			protocol.assertNotNull
			id.assertSame(protocol.aclProtocolId)
			uid.assertEquals(protocol.conversationId)
			protocol.isParticipantSide.assertTrue
		}
	}

	@ParameterizedTest
	@EnumSource(typeof(AclProtocolId))
	def newProtocolAsInitiator(id : AclProtocolId) : void {
		val protocol = this.factory.newProtocolAsInitiator(this.owner, id)
		if (id == AclProtocolId::NONE) {
			protocol.assertNull			
		} else {
			protocol.assertNotNull
			id.assertSame(protocol.aclProtocolId)
			protocol.isParticipantSide.assertFalse
		}
	}

	static class MockableAgent extends Agent {
		new {
			super(UUID::randomUUID, UUID::randomUUID)
		}
	}

	protected static class MockableSchedulesSkill extends Skill implements Schedules {
		public volatile var parallel : boolean = false
		def at(task : AgentTask = null, time : long, procedure : (Agent)=>void) : AgentTask {
			throw new UnsupportedOperationException
		}
		def atFixedDelay(task : AgentTask = null, delay : long, procedure : (Agent)=>void) : AgentTask {
			throw new UnsupportedOperationException
		}
		def cancel(task : AgentTask, mayInterruptIfRunning : boolean = true) : boolean {
			throw new UnsupportedOperationException
		}
		def every(task : AgentTask = null, period : long, procedure : (Agent)=>void) : AgentTask {
			throw new UnsupportedOperationException
		}
		def execute(task : AgentTask = null, procedure : (Agent)=>void) : AgentTask {
			throw new UnsupportedOperationException
		}
		def getActiveTasks : ConcurrentSet<String> {
			throw new UnsupportedOperationException
		}
		def in(task : AgentTask = null, delay : long, procedure : (Agent)=>void) : AgentTask {
			//
		}
		def isCanceled(task : AgentTask) : boolean {
			throw new UnsupportedOperationException
		}
		def setName(task : AgentTask, name : String) {
			throw new UnsupportedOperationException
		}
		def task(name : String) : AgentTask {
			typeof(AgentTask).mock
		}
	}

}
