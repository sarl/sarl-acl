/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.encoding.bitefficient

import io.sarl.acl.encoding.AbstractAclMessageEnvelopeEncodingService
import io.sarl.acl.message.AclMessageEnvelope
import io.sarl.acl.message.AclRepresentation
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.io.ObjectInputStream
import java.io.ObjectOutputStream

/** 
 * This class encodes an ACLMessageEnvelope in bytes or decodes
 * an ACLMessageEnvelope encoded in bytes
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class BitEfficientEnvelopeCodec extends AbstractAclMessageEnvelopeEncodingService {

	override getAclRepresentation : AclRepresentation {
		AclRepresentation::BIT_EFFICIENT
	}

	override encode(envelope : AclMessageEnvelope) : byte[] {
		var encodedEnvelope : byte[]

		var byteArrayOutputStream = new ByteArrayOutputStream
		
		try (var objectOutputStream = new ObjectOutputStream(byteArrayOutputStream)) {
			objectOutputStream.writeObject(envelope) // Serialization of the envelope
			encodedEnvelope = byteArrayOutputStream.toByteArray // Envelope encoded in array of bytes
			objectOutputStream.flush
		}
		
		return encodedEnvelope		
	}

	override decode(encodedEnvelope : byte[], startIndex : int, endIndex : int) : AclMessageEnvelope {
		val correction = encodedEnvelope.validateIndexes(startIndex, endIndex)
		val startIdx = correction.key as int
		val endIdx = correction.value as int
		var decodedEnvelope : AclMessageEnvelope
		var byteArrayInputStream = new ByteArrayInputStream(encodedEnvelope, startIdx, endIdx - startIdx)
		try (var objectInputStream = new ObjectInputStream(byteArrayInputStream)) {
			// Unserialization of the envelope
			decodedEnvelope = objectInputStream.readObject as AclMessageEnvelope 
		}
		return decodedEnvelope
	}

}
