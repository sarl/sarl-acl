/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.protocol.pingpong

import io.sarl.acl.message.Performative
import io.sarl.acl.protocol.AclProtocolId
import io.sarl.acl.tests.protocol.AbstractAclProtocolTest
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*
import io.sarl.acl.protocol.pingpong.InitiatorSarlPingPongProtocol
import io.sarl.acl.protocol.pingpong.PingPongProtocolState

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("InitiatorSarlPingPongProtocol")
class InitiatorFipaProposeProtocolTest extends AbstractAclProtocolTest {

	var participant : UUID

	var protocol : InitiatorSarlPingPongProtocol

	@BeforeEach
	override setUp : void {
		super.setUp
		this.participant = UUID::randomUUID
		this.protocol = new InitiatorSarlPingPongProtocol(this.^agent)
	}

	def initiateProtocol(testAfterPing : boolean = true) : Object {
		this.protocol.init
		val pingData = typeof(Object).mock

		PingPongProtocolState::NOT_STARTED.assertSame(this.protocol.state)

		this.protocol.ping(this.participant, pingData)

		if (testAfterPing) {
			PingPongProtocolState::WAITING_ANSWER.assertSame(this.protocol.state)
			assertReceivedAclMessage(Performative::PROPOSE, pingData)
			this.protocol.assertChanged
		}

		return pingData
	}

	@Test
	@DisplayName("valid sequence")
	def validSequence : void {
		initiateProtocol
		
		var pongData = typeof(Object).mock
		this.protocol.fireEvent(Performative::AGREE, this.participant, AclProtocolId::SARL_PINGPONG.code, pongData)

		PingPongProtocolState::PONG_RECEIVED.assertSame(this.protocol.state)
		
		this.protocol.answer.assertProtocolResult(Performative::AGREE, this.participant, pongData)
		this.protocol.assertFinished
	}

	@Test
	@DisplayName("invalid performative")
	def invalidPerformative : void {
		initiateProtocol
		val ex = typeof(TestProtocolError).assertException [
			this.protocol.fireEvent(Performative::CFP, this.participant, AclProtocolId::FIPA_PROPOSE.code, typeof(Object).mock)
		]
		"Unexpected performative CFP".assertInside(ex.message)
		this.protocol.assertFailed
		this.protocol.assertNotFinished
	}

	@Test
	@DisplayName("timeout")
	def timeout : void {
		this.protocol.assertTimeout [
			initiateProtocol(false)
		]
		this.protocol.assertFailed
	}

}
