/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.manager

import io.sarl.acl.message.AclMessage
import io.sarl.acl.message.UnhandledAclMessage
import io.sarl.acl.protocol.AclProtocol
import io.sarl.core.Behaviors
import io.sarl.lang.core.Agent
import java.lang.ref.WeakReference
import java.util.UUID

/** 
 * Dynamic behavior of a conversation Manager for ACL protocols.
 *
 * <p>This class lets the agent manage its conversations using ACL protocols.
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
behavior StandardConversationManagerBehavior {

	uses Behaviors

	val conversationManager : WeakReference<ConversationManager>

	new (^agent : Agent, conversationManager : ConversationManager) {
		super(^agent)
		this.conversationManager = new WeakReference(conversationManager)
	}

	protected def findConversation(cm : ConversationManager, id : UUID, protocol : String) : AclProtocol {
		val conversation = cm.getConversation(id)
		if (conversation !== null) {
			if (conversation.aclProtocolId.code == protocol) {
				return conversation
			}
		} else if (cm.participantSideAutoCreation) {
			return cm.createConversationAsParticipant(protocol)
		}
		return null
	}

	on AclMessage {
		val cm = this.conversationManager.get
		if (cm !== null) {
			val conversation = cm.findConversation(occurrence.conversationId, occurrence.protocol)
			if (conversation !== null) {
				conversation.wake(occurrence)
			} else {
				wake(new UnhandledAclMessage(occurrence))
			}
		}
	}

}
