/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.util

/** 
 * Additional utilities for strings.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
final class Strings2 {

	private new {}

	/** Unprotect characeters in the given string.
	 *
	 * @param value the value to unprotect.
	 * @return the unprotected value.
	 */
	@SuppressWarnings("potential_inefficient_value_conversion")
	static def unescape(value : String) : String {
		if (value.isNullOrEmpty) {
			return ""
		}
		val buffer = new StringBuilder
		for (var i = 0; i < value.length; i++) {
			val c = value.charAt(i)
			if (c === ('\\' as char)) {
				i++
				if (i < value.length) {
					buffer.append(value.charAt(i))
				}
			} else {
				buffer.append(c)
			}
		}
		return buffer.toString
	}

	/** Protect characeters in the given string.
	 *
	 * @param value the value to unprotect.
	 * @return the unprotected value.
	 */
	@SuppressWarnings("potential_inefficient_value_conversion")
	static def escape(value : String) : String {
		if (value.isNullOrEmpty) {
			return ""
		}
		val buffer = new StringBuilder
		for (var i = 0; i < value.length; i++) {
			val c = value.charAt(i)
			if (c === ('\\' as char)) {
				buffer.append("\\\\")
			} else if (c === ('"' as char)) {
				buffer.append('\\"')
			} else {
				buffer.append(c)
			}
		}
		return buffer.toString
	}

}
