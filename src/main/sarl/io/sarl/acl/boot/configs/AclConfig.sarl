/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.boot.configs

import com.google.inject.AbstractModule
import com.google.inject.Injector
import com.google.inject.Module
import com.google.inject.Provides
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.config.ConfigurationFactory
import java.lang.reflect.Type
import java.util.Collections
import java.util.Map
import javax.inject.Singleton
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.acl.boot.configs.AclConfig.*

/** 
 * Configuration for the ACL features. 
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
@BQConfig("Configuration for the ACL feature")
class AclConfig {

	/** 
	 * Prefix for the configuration entries of the modules.
	 */
	public static val PREFIX = "acl"

	/** Name of the property for the default time out in seconds. */
	public static val DEFAULT_TIMEOUT_NAME = PREFIX + ".timeout"

	/** Default time out in seconds. */
	public static val DEFAULT_TIMEOUT_VALUE = 900.0

	@Accessors(PUBLIC_GETTER)
	var timeout : double = DEFAULT_TIMEOUT_VALUE

	/** Change the default timeout for the ACL protocols
	 * 
	 * @param timeout the default timeout in seconds. 
	 */
	@BQConfigProperty("Time out for ACL protocols in seconds.")
	def setTimeout(timeout : double) {
		this.timeout = timeout
	}

	/** Replies the configuration for the ACL features.
	 * 
	 * @param configFactory the general configuration factory.
	 * @return the configuration.
	 */
	static def getConfiguration(configFactory : ConfigurationFactory) : AclConfig {
		assert configFactory !== null
		var config = configFactory.config(typeof(AclConfig), PREFIX)
		return config
	}

}

/** 
 * Module for creating and configuring the ACL features.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class AclConfigModule extends AbstractModule {

	override configure : void {
		//
	}

	/** Replies the instance of the ACL configuration.
	 * 
	 * @param configFactory accessor to the bootique factory.
	 * @param injector the current injector.
	 * @return the configuration accessor.
	 */
	@Provides
	@Singleton
	def provideAclConfig(configFactory : ConfigurationFactory, injector : Injector) : AclConfig  {
		val config = getConfiguration(configFactory)
		injector.injectMembers(config)
		return config
	}

}

/** Provider of the module for creating and configuring the ACL features.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class AclConfigModuleProvider implements BQModuleProvider {

	override module : Module {
		return new AclConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(AclConfig))
	}

	override moduleBuilder : BQModule.Builder {
		return BQModule::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::AclConfigModuleProvider_0);
	}

}
