/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.manager

import io.sarl.acl.message.AclMessage
import io.sarl.acl.protocol.AbstractAclProtocolEvent
import io.sarl.acl.protocol.AclProtocol
import io.sarl.acl.protocol.AclProtocolChangeListener
import io.sarl.acl.protocol.AclProtocolFactory
import io.sarl.acl.protocol.AclProtocolFinishingListener
import io.sarl.acl.protocol.AclProtocolId
import io.sarl.acl.protocol.AclProtocolTimeoutListener
import io.sarl.acl.protocol.DefaultAclProtocolFactory
import io.sarl.acl.protocol.ProtocolState
import io.sarl.acl.util.InjectorUtil
import io.sarl.core.Behaviors
import io.sarl.lang.core.Behavior
import io.sarl.lang.util.ConcurrentCollection
import io.sarl.lang.util.ConcurrentCollectionFactory
import java.lang.ref.WeakReference
import java.util.Collections
import java.util.TreeMap
import java.util.UUID
import java.util.concurrent.locks.ReadWriteLock
import java.util.concurrent.locks.ReentrantReadWriteLock
import javax.inject.Inject
import javax.inject.Provider
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Conversation Manager for ACL protocols.
 *
 * <p>This class lets the agent manage its conversations using ACL protocols.
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
skill StandardConversationManager implements ConversationManager {

	uses Behaviors
	
	val lock : ReadWriteLock = new ReentrantReadWriteLock
	
	var factory : AclProtocolFactory
	
	val conversationMapping = new TreeMap<UUID, AclProtocol>

	var dynamicBehavior : Behavior

	var timeoutListeners : ConcurrentCollection<AclProtocolTimeoutListener>

	var endListeners : ConcurrentCollection<AclProtocolFinishingListener>

	var changeListeners : ConcurrentCollection<AclProtocolChangeListener>

	var conversationListeners : ConcurrentCollection<ConversationListener>

	val globalListener = new InternalListener(this)

	var autoCreateParticipantProtocols : boolean = true

	var autoRemoveParticipantProtocols : boolean = true

	var fireEventsIntoAgent : boolean = true

	var collectionFactory : ConcurrentCollectionFactory

	/** Replies the last encountered error. */
	@Accessors(PUBLIC_GETTER, PROTECTED_SETTER)
	var lastError : Throwable

	@Inject
	@SuppressWarnings("potential_field_synchronization_problem")
	def setCollectionFactory(collectionFactory : Provider<ConcurrentCollectionFactory>) {
		this.collectionFactory = collectionFactory.get
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	override install {
		this.dynamicBehavior = new StandardConversationManagerBehavior(getOwner, this)
		this.dynamicBehavior.registerBehavior [
			return (it instanceof AclMessage)
		]
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	override uninstall {
		val beh = this.dynamicBehavior
		this.dynamicBehavior = null
		if (beh !== null) {
			beh.unregisterBehavior
		}
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	override setEventFiringInAgentContext(enable : boolean) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			this.fireEventsIntoAgent = enable
		} finally {
			wlock.unlock
		}
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	override getEventFiringInAgentContext : boolean {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			return this.fireEventsIntoAgent
		} finally {
			rlock.unlock
		}
	}

	/** Fire the given event into the agent context. */
	protected def fireEventInAgentContext(^event : AbstractAclProtocolEvent) {
		wake(^event)
	}

	/** Add a listener on protocol's timeout. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def addProtocolTimeoutListener(listener : AclProtocolTimeoutListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.timeoutListeners === null) {
				this.timeoutListeners = this.collectionFactory.newCollection
			}
			this.timeoutListeners += listener
		} finally {
			wlock.unlock
		}
	}

	/** Remove a listener on protocol's timeout. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def removeProtocolTimeoutListener(listener : AclProtocolTimeoutListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.timeoutListeners !== null) {
				this.timeoutListeners.remove(listener)
				if (this.timeoutListeners.empty) {
					this.timeoutListeners = null
				}
			}
		} finally {
			wlock.unlock
		}
	}

	/** Notify timeout listeners.
	 * This function is not thread-safe.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected def notifyProtocolTimeout(protocol : AclProtocol, ^event : AbstractAclProtocolEvent) : void {
		if (this.timeoutListeners !== null) {
			val list = <AclProtocolTimeoutListener>newArrayList(this.timeoutListeners)
			for (listener : list) {
				listener.timeoutReached(protocol)
			}
		}
		if (this.fireEventsIntoAgent && ^event !== null) {
			^event.fireEventInAgentContext
		}
	}

	/** Add a listener on protocol's finishing. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def addProtocolFinishingListener(listener : AclProtocolFinishingListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.endListeners === null) {
				this.endListeners = this.collectionFactory.newCollection
			}
			this.endListeners += listener
		} finally {
			wlock.unlock
		}
	}

	/** Remove a listener on protocol's finishing. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def removeProtocolFinishingListener(listener : AclProtocolFinishingListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.endListeners !== null) {
				this.endListeners.remove(listener)
				if (this.endListeners.empty) {
					this.endListeners = null
				}
			}
		} finally {
			wlock.unlock
		}
	}

	/** Notify finished (not time-out).
	 * This function is not thread-safe.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected def notifyProtocolFinished(protocol : AclProtocol, ^event : AbstractAclProtocolEvent) : void {
		if (this.endListeners !== null) {
			val list = <AclProtocolFinishingListener>newArrayList(this.endListeners)
			for (listener : list) {
				listener.protocolFinished(protocol, ^event)
			}
		}
		if (this.fireEventsIntoAgent && ^event !== null) {
			^event.fireEventInAgentContext
		}
	}

	/** Add a listener on protocol's changes. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def addProtocolChangeListener(listener : AclProtocolChangeListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.changeListeners === null) {
				this.changeListeners = this.collectionFactory.newCollection
			}
			this.changeListeners += listener
		} finally {
			wlock.unlock
		}
	}

	/** Remove a listener on protocol's change. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def removeProtocolChangeListener(listener : AclProtocolChangeListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.changeListeners !== null) {
				this.changeListeners.remove(listener)
				if (this.changeListeners.empty) {
					this.changeListeners = null
				}
			}
		} finally {
			wlock.unlock
		}
	}

	/** Notify changes.
	 * This function is not thread-safe.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected def notifyProtocolChange(protocol : AclProtocol, ^event : AbstractAclProtocolEvent) : void {
		if (this.changeListeners !== null) {
			val list = <AclProtocolChangeListener>newArrayList(this.changeListeners)
			for (listener : list) {
				listener.protocolChanged(protocol, ^event)
			}
		}
		if (this.fireEventsIntoAgent && ^event !== null) {
			^event.fireEventInAgentContext
		}
	}


	/** Add a listener on conversation changes. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def addConversationListener(listener : ConversationListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.conversationListeners === null) {
				this.conversationListeners = this.collectionFactory.newCollection
			}
			this.conversationListeners += listener
		} finally {
			wlock.unlock
		}
	}

	/** Remove a listener on conversation changes. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def removeConversationListener(listener : ConversationListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.conversationListeners !== null) {
				this.conversationListeners.remove(listener)
				if (this.conversationListeners.empty) {
					this.conversationListeners = null
				}
			}
		} finally {
			wlock.unlock
		}
	}

	/** Notify conversation addition.
	 * This function is not thread-safe.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected def notifyConversationAdded(conversation : AclProtocol) : void {
		if (this.conversationListeners !== null) {
			val list = <ConversationListener>newArrayList(this.conversationListeners)
			for (listener : list) {
				listener.conversationAdded(conversation)
			}
		}
	}

	/** Notify conversation removal.
	 * This function is not thread-safe.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected def notifyConversationRemoved(conversation : AclProtocol) : void {
		if (this.conversationListeners !== null) {
			val list = <ConversationListener>newArrayList(this.conversationListeners)
			for (listener : list) {
				listener.conversationRemoved(conversation)
			}
		}
	}

	/** Change the protocol factory. */
	@SuppressWarnings("potential_field_synchronization_problem")
	@Inject
	def setAclProtocolFactory(factory : AclProtocolFactory) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			this.factory = factory
		} finally {
			wlock.unlock
		}
	}

	/** Replies the protocol factory. */
	@SuppressWarnings("potential_field_synchronization_problem")
	@Pure
	def getAclProtocolFactory : AclProtocolFactory {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			if (this.factory === null) {
				this.factory = InjectorUtil::newImplementedByInstance(typeof(AclProtocolFactory), typeof(DefaultAclProtocolFactory))
			}
			return this.factory
		} finally {
			rlock.unlock
		}
	}

	/** Change the auto-creation flag for the participant side protocols. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def setParticipantSideAutoCreation(enable : boolean) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			this.autoCreateParticipantProtocols = enable
		} finally {
			wlock.unlock
		}
	}

	/** Replies if the participant-side protocols are automatically created when an ACL message is received. */
	@SuppressWarnings("potential_field_synchronization_problem")
	@Pure
	def getParticipantSideAutoCreation : boolean {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			return this.autoCreateParticipantProtocols
		} finally {
			rlock.unlock
		}
	}

	/** Change the auto-deletion flag for the participant side protocols. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def setParticipantSideAutoDeletion(enable : boolean) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			this.autoRemoveParticipantProtocols = enable
		} finally {
			wlock.unlock
		}
	}

	/** Replies if the participant-side protocols are automatically removed when finished. */
	@SuppressWarnings("potential_field_synchronization_problem")
	@Pure
	def getParticipantSideAutoDeletion : boolean {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			return this.autoRemoveParticipantProtocols
		} finally {
			rlock.unlock
		}
	}

	/** Unregister the given conversation.
	 *
	 * @param conversation the conversation to unregister
	 */	
	def unregister(conversation : AclProtocol) : void {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (conversation !== null) {
				if (this.conversationMapping.remove(conversation.conversationId) !== null) {
					conversation.uninstall(this)
					conversation.removeChangeListener(this.globalListener)
					conversation.removeFinishingListener(this.globalListener)
					conversation.removeTimeoutListener(this.globalListener)
					conversation.notifyConversationRemoved
				}
			}
		} finally {
			wlock.unlock
		}
	}

	/** Register the given conversation.
	 *
	 * @param conversation the conversation to register
	 */	
	def register(conversation : AclProtocol) : void {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (conversation !== null) {
				this.conversationMapping.put(conversation.conversationId, conversation)
				conversation.addChangeListener(this.globalListener)
				conversation.addFinishingListener(this.globalListener)
				conversation.addTimeoutListener(this.globalListener)
				conversation.install(this)
				conversation.notifyConversationAdded
			}
		} finally {
			wlock.unlock
		}
	}

	override createConversationAsParticipant(protocolType : AclProtocolId, conversationId : UUID, expectedType : Class<T>, name : String) : T with T extends AclProtocol {
		if (protocolType !== null) {
			try {
				val protocol = this.aclProtocolFactory.newProtocolAsParticipant(this.owner, protocolType, conversationId)
				if (protocol !== null) {
					protocol.name = name
					protocol.register
					if (expectedType === null) {
						return protocol as T
					}
					return expectedType.cast(protocol)
				}
			} catch (ex : Throwable) {
				setLastError(ex)
			}
		}
		return null
	}
	
	override createConversationAsParticipant(protocolType : String, conversationId : UUID, expectedType : Class<T>, name : String) : T with T extends AclProtocol {
		if (!protocolType.isNullOrEmpty) {
			try {
				val type = AclProtocolId::valueOfCaseInsensitive(protocolType)
				return createConversationAsParticipant(type, conversationId, expectedType, name)
			} catch (ex : Throwable) {
				setLastError(ex)
			}
		}
		return null
	}

	override createConversationAsInitiator(protocolType : AclProtocolId, expectedType : Class<T>, name : String) : T with T extends AclProtocol {
		if (protocolType !== null) {
			try {
				val protocol = this.aclProtocolFactory.newProtocolAsInitiator(this.owner, protocolType)
				if (protocol !== null) {
					protocol.name = name
					protocol.register
					if (expectedType === null) {
						return protocol as T
					}
					return expectedType.cast(protocol)
				}
			} catch (ex : Throwable) {
				setLastError(ex)
			}
		}
		return null
	}
	
	override createConversationAsInitiator(protocolType : String, expectedType : Class<T>, name : String) : T with T extends AclProtocol {
		try {
			val type = AclProtocolId::valueOfCaseInsensitive(protocolType)
			return createConversationAsInitiator(type, expectedType, name)
		} catch (ex : Throwable) {
			setLastError(ex)
		}
		return null
	}
	
	override getConversation(conversationId : UUID, expectedType : Class<T>) : T with T extends AclProtocol {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			val protocol = conversations.findFirst [
				it.conversationId == conversationId && (expectedType === null || expectedType.isInstance(it))
			]
			if (expectedType === null) {
				return protocol as T
			}
			return expectedType.cast(protocol)
		} finally {
			rlock.unlock
		}
	}

	override getConversations : Iterable<AclProtocol> {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			return Collections::unmodifiableCollection(this.conversationMapping.values)
		} finally {
			rlock.unlock
		}
	}

	override removeConversations(state : ProtocolState) {
			val removables = <AclProtocol>newArrayList
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			for (candidate : this.conversationMapping.values) {
				if (state === null || candidate.state == state) {
					removables += candidate
				}
			}
			for (deletable : removables) {
				deletable.unregister
			}
		} finally {
			wlock.unlock
		}
	}
	
	override removeConversation(conversationId : UUID) : AclProtocol {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			var conversation = conversationId.conversation
			if (conversation !== null) {
				conversation.unregister
				return conversation
			}
			return null
		} finally {
			wlock.unlock
		}
	}

	/** 
	 * Internal listener.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.12
	 */
	private static class InternalListener implements AclProtocolTimeoutListener, AclProtocolFinishingListener, AclProtocolChangeListener {

		val parent : WeakReference<StandardConversationManager>

		new (parent : StandardConversationManager) {
			this.parent = new WeakReference(parent)
		}

		@SuppressWarnings("potential_field_synchronization_problem")
		private def notifyAndRemove(protocol : AclProtocol, ^event : AbstractAclProtocolEvent, code : (StandardConversationManager) => void) {
			val par = this.parent.get
			if (par !== null) {
				val rlock = par.lock.readLock
				rlock.lock
				var autoremove = false
				try {
					autoremove = par.autoRemoveParticipantProtocols
					code.apply(par)
				} finally {
					rlock.unlock
				}
				if (autoremove) {
					par.unregister(protocol)
				}
			}
		}
	
		@SuppressWarnings("potential_field_synchronization_problem")
		private def notify(protocol : AclProtocol, ^event : AbstractAclProtocolEvent, code : (StandardConversationManager) => void) {
			val par = this.parent.get
			if (par !== null) {
				val rlock = par.lock.readLock
				rlock.lock
				try {
					code.apply(par)
				} finally {
					rlock.unlock
				}
			}
		}

		@SuppressWarnings("potential_field_synchronization_problem")
		def timeoutReached(protocol : AclProtocol) {
			protocol.notifyAndRemove(new ProtocolTimeout) [
				it.notifyProtocolTimeout(protocol, new ProtocolTimeout)
			]
		}
		
		@SuppressWarnings("potential_field_synchronization_problem")
		def protocolFinished(protocol : AclProtocol, ^event : AbstractAclProtocolEvent) {
			protocol.notifyAndRemove(^event) [
				it.notifyProtocolFinished(protocol, ^event)
			]
		}
		
		def protocolChanged(protocol : AclProtocol, ^event : AbstractAclProtocolEvent) {
			protocol.notify(^event) [
				it.notifyProtocolChange(protocol, ^event)
			]
		}
		
	}
	
}
