/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.protocol

import io.sarl.acl.protocol.pingpong.InitiatorSarlPingPongProtocol
import io.sarl.acl.protocol.pingpong.ParticipantSarlPingPongProtocol
import io.sarl.acl.protocol.propose.InitiatorFipaProposeProtocol
import io.sarl.acl.protocol.propose.ParticipantFipaProposeProtocol
import io.sarl.acl.protocol.request.InitiatorFipaRequestProtocol
import io.sarl.acl.protocol.request.ParticipantFipaRequestProtocol
import io.sarl.lang.core.Agent
import java.util.UUID
import io.sarl.acl.protocol.query.ParticipantFipaQueryProtocol
import io.sarl.acl.protocol.query.InitiatorFipaQueryProtocol

/** 
 * Factory of a ACL protocol.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class DefaultAclProtocolFactory implements AclProtocolFactory {

	override newProtocolAsParticipant(owner : Agent, protocolType : AclProtocolId, conversationId : UUID) : AclProtocol {
		switch (protocolType) {
			case NONE: {
				return null
			}
			case SARL_PINGPONG: {
				return new ParticipantSarlPingPongProtocol(owner) => [ it.conversationId = conversationId ]
			}
			case FIPA_PROPOSE: {
				return new ParticipantFipaProposeProtocol(owner) => [ it.conversationId = conversationId ]
			}
			case FIPA_REQUEST: {
				return new ParticipantFipaRequestProtocol(owner) => [ it.conversationId = conversationId ]
			}
			case FIPA_QUERY: {
				return new ParticipantFipaQueryProtocol(owner) => [ it.conversationId = conversationId ]
			}
			default: {
				throw new IllegalArgumentException
			}
		}		
	}

	override newProtocolAsInitiator(owner : Agent, protocolType : AclProtocolId) : AclProtocol {
		switch (protocolType) {
			case NONE: {
				return null
			}
			case SARL_PINGPONG: {
				return new InitiatorSarlPingPongProtocol(owner)
			}
			case FIPA_PROPOSE: {
				return new InitiatorFipaProposeProtocol(owner)
			}
			case FIPA_REQUEST: {
				return new InitiatorFipaRequestProtocol(owner)
			}
			case FIPA_QUERY: {
				return new InitiatorFipaQueryProtocol(owner)
			}
			default: {
				throw new IllegalArgumentException
			}
		}		
	}

}
