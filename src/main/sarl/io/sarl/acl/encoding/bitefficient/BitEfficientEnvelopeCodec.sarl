/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2017 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.acl.encoding.bitefficient

import io.sarl.acl.encoding.AbstractACLMessageEnvelopeEncodingService
import io.sarl.acl.message.ACLMessageEnvelope
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.io.ObjectInputStream
import java.io.ObjectOutputStream

/** 
 * This class encodes an ACLMessageEnvelope in bytes or decodes
 * an ACLMessageEnvelope encoded in bytes
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $Groupid$
 * @mavenartifactid $ArtifactId$
 */
class BitEfficientEnvelopeCodec extends AbstractACLMessageEnvelopeEncodingService {

	def encode(envelope : ACLMessageEnvelope) : byte[] {
		var encodedEnvelope : byte[]

		// Output flow
		var byteArrayOutputStream = new ByteArrayOutputStream

		var objectOutputStream = new ObjectOutputStream(byteArrayOutputStream)
		try {
			objectOutputStream.writeObject(envelope) // Serialization of the envelope
			encodedEnvelope = byteArrayOutputStream.toByteArray // Envelope encoded in array of bytes
			objectOutputStream.flush
		} finally {
			objectOutputStream.close
		}
		
		return encodedEnvelope		
	}

	def decode(encodedEnvelope : byte[]) : ACLMessageEnvelope {
		var decodedEnvelope : ACLMessageEnvelope
		
		var byteArrayInputStream = new ByteArrayInputStream(encodedEnvelope) // Input flow
		try {
			var objectInputStream = new ObjectInputStream(byteArrayInputStream)
			// Unserialization of the envelope
			decodedEnvelope = objectInputStream.readObject as ACLMessageEnvelope 
		} finally {
			byteArrayInputStream.close
		} 
		
		return decodedEnvelope
	}
}
