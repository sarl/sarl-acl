/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2017 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.acl.protocol

import io.sarl.acl.message.ACLMessage
import java.util.Collection
import java.util.UUID

/** 
 * Conversation Manager.
 * <p>
 * This class lets the agent manage its conversations using protocols.
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $Groupid$
 * @mavenartifactid $ArtifactId$
 */
capacity ConversationManager {

	/** 
	 * Creates a protocol as the initiator
	 * @param protocolType
	 * @param name conversation name.
	 * @return the protocol created
	 */
	def createConversation(protocolType : EnumFipaProtocol, name : String = null) : FipaProtocol

	/** 
	 * Creates a conversation 
	 * @param message
	 * @return the protocol created
	 */
	def createConversationFromMessage(message : ACLMessage) : FipaProtocol

	/** 
	 * Gets a protocol with the specified conversation id
	 * @param conversationId
	 * 
	 * @return the protocol with the specified conversationId
	 */
	def getConversation(conversationId : UUID) : FipaProtocol
	
	/**
	 * Delete current protocols in the given state
	 * 
	 * @param state
	 */
	def removeConversations(state : ProtocolState)
	
	/**
	 * Gets the list of current conversations.
	 * @return the list of current conversations.
	 */
	def getConversations : Collection<FipaProtocol>

	/**
	 * Sets the list of current conversations.
	 * @param protocols - the list of current conversations.
	 */
	def setConversations(protocols : Collection<? extends FipaProtocol>)

}
