/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.^agent

import io.sarl.acl.message.ACLMessage
import io.sarl.acl.protocol.EnumFipaProtocol
import io.sarl.acl.protocol.FipaProtocol
import io.sarl.acl.protocol.ProtocolState
import java.util.UUID

/** 
 * Conversation Manager.
 * <p>
 * This class lets the agent manage its conversations using protocols.
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $Groupid$
 * @mavenartifactid $ArtifactId$
 */
capacity ConversationManager {

	/** 
	 * Creates a protocol as the participant.
	 *
	 * <p>This function adds the protocol's behavior to the agent.
	 *
	 * <p>A call to this function is equivalent to:<pre><code>
	 * var protocol = new Participant<protocolType>
	 * protocol.name = name
	 * registerBehavior(protocol)
	 * </code></pre>
	 *
	 * @param protocolType
	 * @param name conversation name.
	 * @return the protocol created
	 */
	def createConversationAsParticipant(protocolType : EnumFipaProtocol, name : String = null) : FipaProtocol

	/** 
	 * Creates a protocol as the initiator.
	 * 
	 * <p>This function adds the protocol's behavior to the agent.
	 * 
	 * <p>A call to this function is equivalent to:<pre><code>
	 * var protocol = new Initiator<protocolType>
	 * protocol.name = name
	 * registerBehavior(protocol)
	 * </code></pre>
	 *
	 * @param protocolType
	 * @param name conversation name.
	 * @return the protocol created
	 */
	def createConversationAsInitiator(protocolType : EnumFipaProtocol, name : String = null) : FipaProtocol

	/** 
	 * Creates a participant conversation from the information stored into the given message.
	 *
	 * <p>A call to this function is equivalent to:<pre><code>
	 * var protocol = createConversationAsParticipant(message.protocol)
	 * wake(message)
	 * </code></pre>
	 *
	 * @param message the message to parse.
	 * @return the protocol created
	 */
	def createConversationAsParticipantFromMessage(message : ACLMessage) : FipaProtocol

	/** 
	 * Gets a protocol with the specified conversation id
	 * @param conversationId
	 * 
	 * @return the protocol with the specified conversationId
	 */
	def getConversation(conversationId : UUID) : FipaProtocol
	
	/**
	 * Delete current protocols in the given state
	 * 
	 * @param state
	 */
	def removeConversations(state : ProtocolState)

	/** 
	 * Delete current protocol with the given identifier.
	 * 
	 * @param conversationId
	 * @return the removed conversation
	 */
	def removeConversation(conversationId : UUID) : FipaProtocol

	/** 
	 * Gets the list of current conversations.
	 * @return the list of current conversations.
	 */
	def getConversations : Iterable<FipaProtocol>

}
