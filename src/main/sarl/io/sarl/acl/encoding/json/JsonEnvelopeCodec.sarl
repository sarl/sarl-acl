/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.encoding.json

import com.fasterxml.jackson.databind.SerializationFeature
import com.fasterxml.jackson.databind.json.JsonMapper
import io.sarl.acl.encoding.AbstractAclMessageEnvelopeEncodingService
import io.sarl.acl.message.AclMessageEnvelope
import io.sarl.acl.message.AclRepresentation
import io.sarl.acl.util.Iso8601DateFormat

/** 
 * This class encodes an ACLMessageEnvelope in Json or decodes
 * an ACLMessageEnvelope encoded in Json
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class JsonEnvelopeCodec extends AbstractAclMessageEnvelopeEncodingService {

	var rootMapper : JsonMapper

	override getAclRepresentation : AclRepresentation {
		AclRepresentation::JSON
	}

	/** Create an instance of the JSON mapper. */
	protected def createJsonObjectMapper : JsonMapper {
		val mapper = new JsonMapper
		mapper.disable(SerializationFeature::INDENT_OUTPUT)
		mapper.disable(SerializationFeature::WRITE_DATES_AS_TIMESTAMPS)
		mapper.dateFormat = new Iso8601DateFormat
		return mapper
	}

	/**
	 * Return JSON serializer-deserializer for root content used to convert Map to/from JSON byte array.
	 *
	 * @return the mapper
	 */
	@Pure
	def getJsonMapper : JsonMapper {
		if (this.rootMapper === null) {
			this.rootMapper = createJsonObjectMapper
		}
		return this.rootMapper
	}
	
	/**
	 * Change the JSON serializer-desrializer for root content used to convert Map to/from JSON byte array.
	 *
	 * @param mapper the new mapper.
	 */
	def setJsonMapper(mapper : JsonMapper) {
		this.rootMapper = mapper
	}

	override encode(envelope : AclMessageEnvelope) : byte[] {
		this.jsonMapper.writeValueAsBytes(envelope)
	}

	override decode(encodedEnvelope : byte[], startIndex : int, endIndex : int) : AclMessageEnvelope {
		val correction = encodedEnvelope.validateIndexes(startIndex, endIndex)
		val startIdx = correction.key as int
		val endIdx = correction.value as int
		val rm = this.jsonMapper
		return rm.readValue(encodedEnvelope, startIdx, endIdx - startIdx, typeof(AclMessageEnvelope))
	}

}
