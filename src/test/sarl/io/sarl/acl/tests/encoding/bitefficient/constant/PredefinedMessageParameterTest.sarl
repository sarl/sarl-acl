/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, PredefinedMessageParameter 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.encoding.bitefficient.constant

import io.sarl.acl.encoding.bitefficient.constant.PredefinedMessageParameter
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.HashSet
import java.util.Set
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("PredefinedMessageParameter")
class PredefinedMessageParameterTest {

	var constants : Set<PredefinedMessageParameter>

	@BeforeEach
	def setup : void {
		this.constants = new HashSet(PredefinedMessageParameter::values)
	}

	private def assertNoMoreConstant : void {
		if (!this.constants.empty) {
			fail("Unexpected constants: " + this.constants)
		}
	}

	private def consume(in : PredefinedMessageParameter) : PredefinedMessageParameter {
		this.constants.remove(in)
		return in
	}

	@Test
	def getBinaryCode : void {
		0x02.assertEquals(PredefinedMessageParameter::PARAM_SENDER.consume.binaryCode)
		0x03.assertEquals(PredefinedMessageParameter::PARAM_RECEIVER.consume.binaryCode)
		0x04.assertEquals(PredefinedMessageParameter::PARAM_CONTENT.consume.binaryCode)
		0x05.assertEquals(PredefinedMessageParameter::PARAM_REPLY_WITH.consume.binaryCode)
		0x06.assertEquals(PredefinedMessageParameter::PARAM_REPLY_BY.consume.binaryCode)
		0x07.assertEquals(PredefinedMessageParameter::PARAM_IN_REPLY_TO.consume.binaryCode)
		0x08.assertEquals(PredefinedMessageParameter::PARAM_REPLY_TO.consume.binaryCode)
		0x09.assertEquals(PredefinedMessageParameter::PARAM_LANGUAGE.consume.binaryCode)
		0x0A.assertEquals(PredefinedMessageParameter::PARAM_ENCODING.consume.binaryCode)
		0x0B.assertEquals(PredefinedMessageParameter::PARAM_ONTOLOGY.consume.binaryCode)
		0x0C.assertEquals(PredefinedMessageParameter::PARAM_PROTOCOL.consume.binaryCode)
		0x0D.assertEquals(PredefinedMessageParameter::PARAM_CONVERSATION_ID.consume.binaryCode)
		assertNoMoreConstant
	}

	@Test
	def toJsonString : void {
		"param_sender".assertEquals(PredefinedMessageParameter::PARAM_SENDER.consume.toJsonString)
		"param_receiver".assertEquals(PredefinedMessageParameter::PARAM_RECEIVER.consume.toJsonString)
		"param_content".assertEquals(PredefinedMessageParameter::PARAM_CONTENT.consume.toJsonString)
		"param_reply_with".assertEquals(PredefinedMessageParameter::PARAM_REPLY_WITH.consume.toJsonString)
		"param_reply_by".assertEquals(PredefinedMessageParameter::PARAM_REPLY_BY.consume.toJsonString)
		"param_in_reply_to".assertEquals(PredefinedMessageParameter::PARAM_IN_REPLY_TO.consume.toJsonString)
		"param_reply_to".assertEquals(PredefinedMessageParameter::PARAM_REPLY_TO.consume.toJsonString)
		"param_language".assertEquals(PredefinedMessageParameter::PARAM_LANGUAGE.consume.toJsonString)
		"param_encoding".assertEquals(PredefinedMessageParameter::PARAM_ENCODING.consume.toJsonString)
		"param_ontology".assertEquals(PredefinedMessageParameter::PARAM_ONTOLOGY.consume.toJsonString)
		"param_protocol".assertEquals(PredefinedMessageParameter::PARAM_PROTOCOL.consume.toJsonString)
		"param_conversation_id".assertEquals(PredefinedMessageParameter::PARAM_CONVERSATION_ID.consume.toJsonString)
		assertNoMoreConstant
	}

	@Test
	@DisplayName("valueOfCaseInsensitive with valid argument")
	def valueOfCaseInsensitive_validArgument : void {
		PredefinedMessageParameter::PARAM_SENDER.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_sender"))
		PredefinedMessageParameter::PARAM_SENDER.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_Sender"))

		PredefinedMessageParameter::PARAM_RECEIVER.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_receiver"))
		PredefinedMessageParameter::PARAM_RECEIVER.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_Receiver"))

		PredefinedMessageParameter::PARAM_CONTENT.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_content"))
		PredefinedMessageParameter::PARAM_CONTENT.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_Content"))

		PredefinedMessageParameter::PARAM_REPLY_WITH.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_reply_with"))
		PredefinedMessageParameter::PARAM_REPLY_WITH.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_Reply_With"))

		PredefinedMessageParameter::PARAM_REPLY_BY.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_reply_by"))
		PredefinedMessageParameter::PARAM_REPLY_BY.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_Reply_By"))

		PredefinedMessageParameter::PARAM_IN_REPLY_TO.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_in_reply_to"))
		PredefinedMessageParameter::PARAM_IN_REPLY_TO.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_In_Reply_To"))

		PredefinedMessageParameter::PARAM_REPLY_TO.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_reply_to"))
		PredefinedMessageParameter::PARAM_REPLY_TO.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_Reply_To"))

		PredefinedMessageParameter::PARAM_LANGUAGE.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_language"))
		PredefinedMessageParameter::PARAM_LANGUAGE.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_Language"))

		PredefinedMessageParameter::PARAM_ENCODING.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_encoding"))
		PredefinedMessageParameter::PARAM_ENCODING.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_Encoding"))

		PredefinedMessageParameter::PARAM_ONTOLOGY.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_ontology"))
		PredefinedMessageParameter::PARAM_ONTOLOGY.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_Ontology"))

		PredefinedMessageParameter::PARAM_PROTOCOL.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_protocol"))
		PredefinedMessageParameter::PARAM_PROTOCOL.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_Protocol"))

		PredefinedMessageParameter::PARAM_CONVERSATION_ID.consume.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("param_conversation_id"))
		PredefinedMessageParameter::PARAM_CONVERSATION_ID.assertSame(PredefinedMessageParameter::valueOfCaseInsensitive("Param_Conversation_Id"))

		assertNoMoreConstant
	}

	@Test
	@DisplayName("valueOfCaseInsensitive with invalid argument")
	@SuppressWarnings("unused_local_variable")
	def valueOfCaseemptyArgument_invalidArgument : void {
		typeof(NullPointerException).assertException [
			var x = PredefinedMessageParameter::valueOfCaseInsensitive(null)
		]
		typeof(NullPointerException).assertException [
			var x = PredefinedMessageParameter::valueOfCaseInsensitive("")
		]
		typeof(IllegalArgumentException).assertException [
			var x = PredefinedMessageParameter::valueOfCaseInsensitive("abc")
		]
	}

	@Test
	def getJsonLabels : void {
		("param_sender, param_receiver, param_content, param_reply_with, "
		+ "param_reply_by, param_in_reply_to, param_reply_to, param_language, "
		+ "param_encoding, param_ontology, param_protocol, param_conversation_id").assertEquals(PredefinedMessageParameter::jsonLabels)
	}

}
