/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.message

import io.sarl.acl.message.AclRepresentation
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.HashSet
import java.util.Set
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("AclRepresentation")
class AclRepresentationTest {

	var constants : Set<AclRepresentation>

	@BeforeEach
	def setup : void {
		this.constants = new HashSet(AclRepresentation::values)
	}

	private def assertNoMoreConstant : void {
		if (!this.constants.empty) {
			fail("Unexpected constants: " + this.constants)
		}
	}

	private def consume(in : AclRepresentation) : AclRepresentation {
		this.constants.remove(in)
		return in
	}

	@Test
	def getDefault : void {
		AclRepresentation::BIT_EFFICIENT.assertSame(AclRepresentation::getDefault)
	}

	@Test
	def toJsonString : void {
		"bit_efficient".assertEquals(AclRepresentation::BIT_EFFICIENT.consume.toJsonString)
		"json".assertEquals(AclRepresentation::JSON.consume.toJsonString)
		"string".assertEquals(AclRepresentation::STRING.consume.toJsonString)
		"xml".assertEquals(AclRepresentation::XML.consume.toJsonString)
		assertNoMoreConstant
	}

	@Test
	def getFipaName : void {
		"fipa.acl.rep.bitefficient.std".assertEquals(AclRepresentation::BIT_EFFICIENT.consume.fipaName)
		"sarl.acl.rep.json.std".assertEquals(AclRepresentation::JSON.consume.fipaName)
		"fipa.acl.rep.string.std".assertEquals(AclRepresentation::STRING.consume.fipaName)
		"fipa.acl.rep.xml.std".assertEquals(AclRepresentation::XML.consume.fipaName)
		assertNoMoreConstant
	}

	@Test
	@DisplayName("valueOfCaseInsensitive(valid name, null)")
	def valueOfCaseInsensitive_validArgument_null : void {
		AclRepresentation::BIT_EFFICIENT.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("bit_efficient", null))
		AclRepresentation::BIT_EFFICIENT.assertSame(AclRepresentation::valueOfCaseInsensitive("Bit_efficient", null))
		AclRepresentation::BIT_EFFICIENT.assertSame(AclRepresentation::valueOfCaseInsensitive("fipa.acl.rep.bitefficient.std", null))

		AclRepresentation::JSON.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("json", null))
		AclRepresentation::JSON.assertSame(AclRepresentation::valueOfCaseInsensitive("json", null))
		AclRepresentation::JSON.assertSame(AclRepresentation::valueOfCaseInsensitive("sarl.acl.rep.json.std", null))

		AclRepresentation::STRING.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("string", null))
		AclRepresentation::STRING.assertSame(AclRepresentation::valueOfCaseInsensitive("String", null))
		AclRepresentation::STRING.assertSame(AclRepresentation::valueOfCaseInsensitive("fipa.acl.rep.string.std", null))

		AclRepresentation::XML.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("xml", null))
		AclRepresentation::XML.assertSame(AclRepresentation::valueOfCaseInsensitive("Xml", null))
		AclRepresentation::XML.assertSame(AclRepresentation::valueOfCaseInsensitive("fipa.acl.rep.xml.std", null))

		assertNoMoreConstant
	}

	@Test
	@DisplayName("valueOfCaseInsensitive(invalid name, null)")
	@SuppressWarnings("unused_local_variable")
	def valueOfCaseemptyArgument_invalidArgument_null : void {
		typeof(NullPointerException).assertException [
			var x = AclRepresentation::valueOfCaseInsensitive(null, null)
		]
		typeof(NullPointerException).assertException [
			var x = AclRepresentation::valueOfCaseInsensitive("", null)
		]
		typeof(IllegalArgumentException).assertException [
			var x = AclRepresentation::valueOfCaseInsensitive("abc", null)
		]
	}

	@Test
	@DisplayName("valueOfCaseInsensitive(valid name, value)")
	def valueOfCaseInsensitive_validArgument_value : void {
		AclRepresentation::BIT_EFFICIENT.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("bit_efficient", AclRepresentation::JSON))
		AclRepresentation::BIT_EFFICIENT.assertSame(AclRepresentation::valueOfCaseInsensitive("Bit_efficient", AclRepresentation::JSON))
		AclRepresentation::BIT_EFFICIENT.assertSame(AclRepresentation::valueOfCaseInsensitive("fipa.acl.rep.bitefficient.std", AclRepresentation::JSON))

		AclRepresentation::JSON.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("json", AclRepresentation::BIT_EFFICIENT))
		AclRepresentation::JSON.assertSame(AclRepresentation::valueOfCaseInsensitive("json", AclRepresentation::BIT_EFFICIENT))
		AclRepresentation::JSON.assertSame(AclRepresentation::valueOfCaseInsensitive("sarl.acl.rep.json.std", AclRepresentation::BIT_EFFICIENT))

		AclRepresentation::STRING.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("string", AclRepresentation::JSON))
		AclRepresentation::STRING.assertSame(AclRepresentation::valueOfCaseInsensitive("String", AclRepresentation::JSON))
		AclRepresentation::STRING.assertSame(AclRepresentation::valueOfCaseInsensitive("fipa.acl.rep.string.std", AclRepresentation::JSON))

		AclRepresentation::XML.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("xml", AclRepresentation::JSON))
		AclRepresentation::XML.assertSame(AclRepresentation::valueOfCaseInsensitive("Xml", AclRepresentation::JSON))
		AclRepresentation::XML.assertSame(AclRepresentation::valueOfCaseInsensitive("fipa.acl.rep.xml.std", AclRepresentation::JSON))

		assertNoMoreConstant
	}

	@Test
	@DisplayName("valueOfCaseInsensitive(invalid name, value)")
	@SuppressWarnings("unused_local_variable")
	def valueOfCaseemptyArgument_invalidArgument_value : void {
		AclRepresentation::JSON.assertSame(AclRepresentation::valueOfCaseInsensitive(null, AclRepresentation::JSON))
		AclRepresentation::JSON.assertSame(AclRepresentation::valueOfCaseInsensitive("", AclRepresentation::JSON))
		AclRepresentation::JSON.assertSame(AclRepresentation::valueOfCaseInsensitive("abc", AclRepresentation::JSON))
	}

	@Test
	@DisplayName("valueOfCaseInsensitive(valid name)")
	def valueOfCaseInsensitive_validArgument : void {
		AclRepresentation::BIT_EFFICIENT.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("bit_efficient"))
		AclRepresentation::BIT_EFFICIENT.assertSame(AclRepresentation::valueOfCaseInsensitive("Bit_efficient"))
		AclRepresentation::BIT_EFFICIENT.assertSame(AclRepresentation::valueOfCaseInsensitive("fipa.acl.rep.bitefficient.std"))

		AclRepresentation::JSON.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("json"))
		AclRepresentation::JSON.assertSame(AclRepresentation::valueOfCaseInsensitive("json"))
		AclRepresentation::JSON.assertSame(AclRepresentation::valueOfCaseInsensitive("sarl.acl.rep.json.std"))

		AclRepresentation::STRING.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("string"))
		AclRepresentation::STRING.assertSame(AclRepresentation::valueOfCaseInsensitive("String"))
		AclRepresentation::STRING.assertSame(AclRepresentation::valueOfCaseInsensitive("fipa.acl.rep.string.std"))

		AclRepresentation::XML.consume.assertSame(AclRepresentation::valueOfCaseInsensitive("xml"))
		AclRepresentation::XML.assertSame(AclRepresentation::valueOfCaseInsensitive("Xml"))
		AclRepresentation::XML.assertSame(AclRepresentation::valueOfCaseInsensitive("fipa.acl.rep.xml.std"))

		assertNoMoreConstant
	}

	@Test
	@DisplayName("valueOfCaseInsensitive(invalid name)")
	@SuppressWarnings("unused_local_variable")
	def valueOfCaseemptyArgument_invalidArgument : void {
		typeof(NullPointerException).assertException [
			var x = AclRepresentation::valueOfCaseInsensitive(null)
		]
		typeof(NullPointerException).assertException [
			var x = AclRepresentation::valueOfCaseInsensitive("")
		]
		typeof(IllegalArgumentException).assertException [
			var x = AclRepresentation::valueOfCaseInsensitive("abc")
		]
	}

	
	@Test
	def getJsonLabels : void {
		"bit_efficient, string, json, xml".assertEquals(AclRepresentation::jsonLabels)
	}

}
