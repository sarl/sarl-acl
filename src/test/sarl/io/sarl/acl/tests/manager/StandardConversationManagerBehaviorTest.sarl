/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.manager

import io.sarl.acl.manager.ConversationManager
import io.sarl.acl.manager.StandardConversationManagerBehavior
import io.sarl.acl.message.AclMessage
import io.sarl.acl.message.Performative
import io.sarl.acl.message.UnhandledAclMessage
import io.sarl.acl.protocol.AclProtocol
import io.sarl.acl.protocol.AclProtocolId
import io.sarl.core.Behaviors
import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Scope
import io.sarl.lang.core.Skill
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.lang.core.SREutils.*
import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.ArgumentMatchers.*
import static extension org.mockito.Mockito.*
import io.sarl.lang.util.ConcurrentCollection

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("StandardConversationManagerBehavior")
class StandardConversationManagerBehaviorTest {

	var ^agent : Agent

	var ^behavior : StandardConversationManagerBehavior

	var manager : ConversationManager

	var behaviors : MockableBehaviors

	@BeforeEach
	def setUp : void {
		this.behaviors = new MockableBehaviors
		this.^agent = new MockableAgent(this.behaviors).spy
		this.manager = typeof(ConversationManager).mock
		this.^behavior = new StandardConversationManagerBehavior(this.^agent, this.manager)
	}

	@PrivateAPI(isCallerOnly = true)
	@SuppressWarnings("use_reserved_sarl_annotation")
	protected def fireEvent(evt : AclMessage) : void {
		val behaviorsMethodsToExecute = <Runnable>newArrayList
		this.^behavior.doEvaluateBehaviorGuards(evt, behaviorsMethodsToExecute)
		1.assertEquals(behaviorsMethodsToExecute.size)
		behaviorsMethodsToExecute.get(0).run
	}

	@Test
	@DisplayName("on AclMessage for unknown conversation without creation")
	def onEventUnknownConversation_noCreation : void {
		when(this.manager.participantSideAutoCreation).thenReturn(false)
		//
		val expected = new AclMessage(Performative::NONE)
		expected.conversationId = UUID::randomUUID
		expected.fireEvent
		//
		1.assertEquals(this.behaviors.events.size)
		val evt0 = this.behaviors.events.get(0)
		typeof(UnhandledAclMessage).assertInstanceOf(evt0)
		val evt1 = evt0 as UnhandledAclMessage
		expected.assertSame(evt1.unhandledMessage)
		this.manager.verify(never).createConversationAsParticipant(anyString, typeof(UUID).any)
	}

	@Test
	@DisplayName("on AclMessage for unknown conversation with creation")
	def onEventUnknownConversation_creation : void {
		when(this.manager.participantSideAutoCreation).thenReturn(true)
		val newConv = typeof(AclProtocol).mock
		when(newConv.aclProtocolId).thenReturn(AclProtocolId::NONE)
		when(this.manager.createConversationAsParticipant(anyString, typeof(UUID).any)).thenReturn(newConv)
		//
		val expected = new AclMessage(Performative::NONE)
		expected.protocol = AclProtocolId::NONE.code
		val expectedCid = UUID::randomUUID
		expected.conversationId = expectedCid
		expected.fireEvent
		//
		1.assertEquals(this.behaviors.events.size)
		val evt0 = this.behaviors.events.get(0)
		typeof(AclMessage).assertInstanceOf(evt0)
		expected.assertSame(evt0)
		val capture0 = typeof(String).forClass
		val capture1 = typeof(UUID).forClass
		this.manager.verify(1.times).createConversationAsParticipant(capture0.capture, capture1.capture)
		AclProtocolId::NONE.code.assertEquals(capture0.value)
		expectedCid.assertEquals(capture1.value)
	}

	@Test
	@DisplayName("on AclMessage for known conversation")
	def onEventKnownConversation : void {
		val conv = typeof(AclProtocol).mock
		when(conv.aclProtocolId).thenReturn(AclProtocolId::FIPA_PROPOSE)
		when(this.manager.getConversation(typeof(UUID).any)).thenReturn(conv)
		//
		val expected = new AclMessage(Performative::NONE)
		expected.conversationId = UUID::randomUUID
		expected.protocol = AclProtocolId::FIPA_PROPOSE.code
		expected.fireEvent
		//
		1.assertEquals(this.behaviors.events.size)
		val evt0 = this.behaviors.events.get(0)
		typeof(AclMessage).assertInstanceOf(evt0)
		expected.assertSame(evt0)
	}

	static class MockableAgent extends Agent {
		new (behaviors : MockableBehaviors) {
			super(UUID::randomUUID, UUID::randomUUID)
			setSkill(behaviors)
		}
	}

	static class MockableBehaviors extends Skill implements Behaviors {
	
		public val events = <Event>newArrayList
	
		def asEventListener : EventListener {
			throw new UnsupportedOperationException
		}
		
		def getRegisteredBehaviors : ConcurrentCollection<Behavior> {
			throw new UnsupportedOperationException
		}
		
		def hasRegisteredBehavior : boolean {
			throw new UnsupportedOperationException
		}
		
		def registerBehavior(attitude : Behavior, filter : (Event)=>Boolean = null, initializationParameters : Object*) : Behavior {
			throw new UnsupportedOperationException
		}
		
		def unregisterBehavior(attitude : Behavior) : Behavior {
			throw new UnsupportedOperationException
		}
		
		def wake(^event : Event, scope : Scope<Address> = null) {
			this.events += ^event
		}
		
		def wake(^behavior : Behavior, ^event : Event) {
			this.events += ^event
		}
		
		def wake(behaviors : Iterable<Behavior>, ^event : Event) {
			this.events += ^event
		}
		
	}

}
