/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.encoding

import io.sarl.acl.encoding.AbstractAclMessageContentEncodingService
import io.sarl.acl.message.AclMessage
import io.sarl.acl.message.AclMessageContent
import io.sarl.acl.message.AclMessageContentFactory
import io.sarl.acl.message.AclRepresentation
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("AbstractAclMessageContentEncodingService")
class XAbstractAclMessageContentEncodingServiceTest {

	var service : AbstractAclMessageContentEncodingService

	@BeforeEach
	def setUp : void {
		this.service = new AbstractAclMessageContentEncodingService() {
			def encode(aMsg : AclMessage) : byte[] {
				throw new UnsupportedOperationException
			}
			def decode(byteMsg : byte[], start : int, end : int) : AclMessageContent {
				throw new UnsupportedOperationException
			}			
			def getAclRepresentation : AclRepresentation {
				throw new UnsupportedOperationException
			}
		}
	}

	@Test
	def getContentFactory : void {
		this.service.contentFactory.assertNotNull
	}

	@Test
	def setContentFactory : void {
		val expected = typeof(AclMessageContentFactory).mock
		this.service.contentFactory = expected
		expected.assertSame(this.service.contentFactory)
	}

}
