/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.message

import io.sarl.acl.encoding.string.StringACLCodec
import io.sarl.acl.encoding.xml.XMLACLCodec
import io.sarl.acl.encoding.xml.XMLACLCodecHelper
import io.sarl.acl.protocol.EnumFipaProtocol
import java.io.Serializable
import java.util.Collection
import java.util.Date
import java.util.Properties
import java.util.UUID
import io.sarl.lang.core.Event
import org.eclipse.xtext.xbase.lib.util.ToStringBuilder

/** 
 * This class precises the minimal set of attributes required by an ACL Message to be sent and received.
 * 
 * @see <a href="http://www.fipa.org/specs/fipa00061/SC00061G.html">FIPA ACL Message Structure Specification</a>
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $Groupid$
 * @mavenartifactid $ArtifactId$
 */
final class ACLMessage extends Event {

	/** 
	 * Message content Factory.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $Groupid$
	 * @mavenartifactid $ArtifactId$
	 */
	static class ContentFactory implements ACLMessageContentFactory {
		def newContent : ACLMessageContent {
			new Content
		}
	}

	/** 
	 * This inner-class represents the content of the ACL Message.
	 * 
	 * @see <a href="http://www.fipa.org/specs/fipa00061/SC00061G.html">FIPA ACL Message Structure Specification</a>
	 * 
	 * @author $Author: sgalland$
	 * @author $Author: ngaud$
	 * @version $FullVersion$
	 * @mavengroupid $Groupid$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class Content implements ACLMessageContent {

		var performative : Performative 
    	var sender : UUID
    	var receiver : Collection<UUID>
		var replyTo : Collection<UUID>
		var content : Object 
    	var language  : String 
    	var encoding : String 
    	var ontology : String 
    	var protocol : String 
    	var conversationId : UUID 
    	var replyWith : String 
    	var inReplyTo : String 
    	var replyBy  : Date 
    	
    	def getPerformative : Performative {
			this.performative
		}

		def setPerformative(performative : Performative) {
			this.performative = performative
		}

		def getSender : UUID {
			this.sender
		}

		def setSender(address : UUID) {
			this.sender = address
		}

		def getReceivers : Collection<UUID>{
			this.receiver
		}

		def setReceivers(receivers : Collection<UUID>) {
			this.receiver = receivers
		}

		def getReplyTo : Collection<UUID> {
			this.replyTo
		}

		def setReplyTo(replyTo : Collection<UUID>) {
			this.replyTo = replyTo
		}

		def getContent : Object {
			this.content
		}

		def setContent(content : Object) {
			this.content = content
		}

		def getLanguage : String {
			this.language
		}

		def setLanguage(language : String) {
			this.language = language
		}

		def getEncoding : String {
			this.encoding
		}

		def setEncoding(encoding : String) {
			this.encoding = encoding
		}

		def getOntology : String {
			this.ontology
		}

		def setOntology(ontology : String) {
			this.ontology = ontology
		}

		def getProtocol : String {
			this.protocol
		}

		def setProtocol(protocol : String) {
			this.protocol = protocol
		}

		def getConversationID : UUID {
			this.conversationId
		}

		def setConversationID(conversationId : UUID) {
			this.conversationId = conversationId
		}

		def getReplyWith : String {
			this.replyWith
		}

		def setReplyWith(replyWith : String) {
			this.replyWith = replyWith
		}

		def getInReplyTo : String {
			this.inReplyTo
		}

		def setInReplyTo(inReplyTo : String) {
			this.inReplyTo = inReplyTo
		}

		def getReplyBy : Date {
			this.replyBy
		}

		def setReplyBy(replyBy : Date) {
			this.replyBy = replyBy
		}

    }
  
	/** 
	 * Message envelope Factory.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $Groupid$
	 * @mavenartifactid $ArtifactId$
	 */
	static class EnvelopeFactory implements ACLMessageEnvelopeFactory {
		def newEnvelope : ACLMessageEnvelope {
			new Envelope
		}
	}

	/** 
	 * This inner-class represents the envelope of the ACL Message.
	 * 
	 * @see <a href="http://www.fipa.org/specs/fipa00085/SC00085J.html">FIPA Agent Message Transport Envelope Representation in XML Specification</a>
	 * 
	 * @author $Author: sgalland$
	 * @author $Author: ngaud$
	 * @version $FullVersion$
	 * @mavengroupid $Groupid$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class Envelope implements ACLMessageEnvelope, Serializable {
		
		var to : Collection<UUID> 
		var from : UUID
		var aclRepresentation : String
		var date : Date
		var comments : String
		var payloadLength : Long
		var payloadEncoding : String
		var intendedReceiver : Collection<UUID>
		var transportBehaviour : Properties
		
		def getTo : Collection<UUID> {
			this.to
		}

		def setTo(addresses : Collection<UUID>) {
			this.to = addresses
		}

		def getFrom : UUID {
			this.from
		}

		def setFrom(address : UUID) {
			this.from = address
		}

		def getAclRepresentation : String {
			this.aclRepresentation
		}

		def setAclRepresentation(aclRepresentation : String) {
			this.aclRepresentation = aclRepresentation
		}

		def getDate : Date {
			this.date
		}

		def setDate(date : Date) {
			this.date = date
		}

		def getComments : String {
			this.comments
		}

		def setComments(comments : String) {
			this.comments = comments
		}

		def getPayloadLength : Long {
			this.payloadLength
		}

		def setPayloadLength(payloadLength : Long) {
			this.payloadLength = payloadLength
		}

		def getPayloadEncoding : String {
			this.payloadEncoding
		}

		def setPayloadEncoding(payloadEncoding : String) {
			this.payloadEncoding = payloadEncoding
		}

		def getIntendedReceiver : Collection<UUID> {
			this.intendedReceiver
		}

		def setIntendedReceiver(intendedReceivers : Collection<UUID>) {
			this.intendedReceiver = intendedReceivers
		}

		def getTransportBehaviour : Properties {
			this.transportBehaviour
		}

		def setTransportBehaviour(transportBehaviour : Properties) {
			this.transportBehaviour = transportBehaviour
		}
    	
    }

	var envelope : Envelope
	var content : Content

	/** 
	 * Creates an ACL Message with the given content (any {@link Object}) and the given performative.
	 * 
	 * @param content 
	 * @param performative
	 */
	new (performative : Performative, content : Object = null) {
		getContent.content = content
		setPerformative = performative
	}

	/** 
	 * Creates an ACL Message with the given {@link ACLMessageEnvelope} and the given {@link ACLMessageContent}.
	 * 
	 * @param _envelope
	 * @param _content
	 */
	new (envelope : ACLMessageEnvelope, content : ACLMessageContent) {
		this.envelope = envelope as Envelope
		this.content = content as Content
	}

	override toString(builder : ToStringBuilder) {
		builder.add('acl', StringACLCodec::toString(this))
	}

	/** 
	 * Returns a string representation of the ACL Message.
	 * @return a string representing this ACL Message.
	 */
	def toXML : String {
		XMLACLCodecHelper::format(XMLACLCodec::toXML(this))
	}

	/** 
	 * Gets the envelope of the ACL Message.
	 * 
	 * @return the envelope
	 */
	def getEnvelope : ACLMessageEnvelope {
		if (this.envelope === null) {
			this.envelope = new Envelope
		}
		return this.envelope
	}

	/** 
	 * Gets the content of the ACL Message.
	 * 
	 * @return the content
	 */
	def getContent : ACLMessageContent {
		if (this.content === null) {
			this.content = new Content
		}
		return this.content
	}

	/** 
	 * Gets the performative of the ACL Message.
	 * @return the performative of the ACL Message.
	 */
	final def getPerformative : Performative {
		getContent.getPerformative
	}

	/** 
	 * Sets the performative of the ACL Message.
	 * @param performative
	 * @see Content
	 */
	final def setPerformative(performative : Performative) {
		getContent.setPerformative = performative
	}

	/** 
	 * Gets the agent address of the sender of the ACL Message.
	 * @return the agent address of the sender of the ACL Message.
	 */
	final def getSender : UUID {
		getContent.getSender
	}

	/** 
	 * Sets the agent address of the sender of the ACL Message.
	 * 
	 * @param address is the agent address of the agent sending the ACL Message.
	 */
	final def setSender(address : UUID) {
		getContent.setSender = address
		getEnvelope.setFrom = address
	}

	/** 
	 * Gets the list of the receivers of the ACL Message.
	 * 
	 * @return a collection of {@link AgentAddress}
	 */
	final def getReceivers : Collection<UUID> {
		getContent.getReceivers
	}

	/** 
	 * Sets the list of the receivers of the ACL Message.
	 * 
	 * @param addresses is a collection of {@link AgentAddress}
	 */
	final def setReceivers(addresses : Collection<UUID>) {
		getContent.setReceivers = addresses
		getEnvelope.setTo = addresses
	}

	/** 
	 * Gets the ACL Representation of the ACL Message.
	 * This information will then permit to encode and decode the corresponding content.
	 * 
	 * @return the ACL Representation
	 */
	final def getAclRepresentation : String {
		getEnvelope.getAclRepresentation
	}

	/** 
	 * Sets the ACL Representation of the ACL Message. (example : fipa.acl.rep.xml.std)
	 * 
	 * @param aclRepresentation
	 */
	final def setAclRepresentation(aclRepresentation : String) {
		getEnvelope.setAclRepresentation(aclRepresentation)		
	}

	/** 
	 * Gets the ontology of the ACL Message.
	 * @return the ontology of the ACL Message.
	 */
	final def getOntology : String {
		getContent.getOntology
	}

	/** 
	 * Sets the ontology of the ACL Message.
	 * <p>
	 * In many situations, the ontology parameter 
	 * will be commonly understood by the agent community 
	 * and so this message parameter may be omitted.
	 * 
	 * @param ontology
	 */
	final def setOntology(ontology : String) {
		getContent.setOntology = ontology
	}
		
	/** 
	 * Gets the encoding of the ACL Message.
	 * @return the encoding of the ACL Message.
	 */
	final def getEncoding : String {
		getContent.getEncoding
	}

	/** 
	 * Sets the encoding of the ACL Message.
	 * @param encoding
	 */
	final def setEncoding(encoding : String) {
		getContent.setEncoding = encoding
	}

	/** 
	 * Gets the language of the ACL Message.
	 * @return the language of the ACL Message.
	 */
	final def getLanguage : String {
		getContent.getLanguage
	}

	/** 
	 * Sets the language of the ACL Message.
	 * 
	 * @param language
	 */
	final def setLanguage(language : String) {
		getContent.setLanguage = language
	}

	/** 
	 * Gets the protocol used to mangage the ACL Message.
	 * @return the protocol used to mangage the ACL Message.
	 * 
	 * @see EnumFipaProtocol
	 */
	final def getProtocol : EnumFipaProtocol {
		return EnumFipaProtocol::valueOfByName(getContent.getProtocol);
	}

	/** 
	 * Sets the protocol used to manage the ACL Message.
	 * @param protocol
	 * @see EnumFipaProtocol
	 */
	final def setProtocol(protocol : EnumFipaProtocol) {
		getContent.setProtocol(protocol.fipaName)
	}

	/** 
	 * Gets the conversation Id of the ACL Message.
	 * @return the conversation Id of the ACL Message.
	 */
	final def getConversationID : UUID {
		getContent.getConversationID
	}

	/** 
	 * Sets the conversation Id of the ACL Message.
	 * 
	 * @param conversationId is an {@link UUID}
	 */
	final def setConversationID(conversationId : UUID) {
		getContent.setConversationID = conversationId
	}

}
