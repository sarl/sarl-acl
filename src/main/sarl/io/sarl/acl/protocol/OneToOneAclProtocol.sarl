/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.protocol

import java.util.Collection
import java.util.Collections
import java.util.UUID

/** 
 * Abstract implementation of a protocol with a single participant.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("potential_field_synchronization_problem")
abstract behavior OneToOneAclProtocol extends AclProtocol {

	var participant : UUID

	final def getMaximumNumberOfParticipants : int {
		1
	}

	final override getParticipants : Collection<UUID> {
		if (this.participant === null) {
			return Collections::emptyList
		}
		return Collections::singleton(this.participant)
	}

	/** Replies the single participant. */
	final def getParticipant : UUID {
		this.participant
	}

	/** Initiate the protocol as an initiator.
	 * This function is not thread-safe.
	 *
	 * @param participant the identifier of the protocol participant.
	 */
	protected def initiateAsInitiator(participant : UUID) : void {
		if (this.initiator !== null) {
			reportTooManyInitiatorError
		} else {
			this.initiator = owner.ID
			this.participant = participant
			this.conversationId = UUID::randomUUID
		}
	}

	/** Initiate the protocol as a participant.
	 */
	protected def initiateAsParticipant : void {
		if (this.participant !== null) {
			reportTooManyParticipantError
		} else if (this.initiator == owner.ID) {
			reportParticipantIsAlreadyInitiatorError
		} else {	
			this.participant = owner.ID
		}
	}

}
