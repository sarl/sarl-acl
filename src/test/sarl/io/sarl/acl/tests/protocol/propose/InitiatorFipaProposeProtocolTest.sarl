/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.protocol.propose

import io.sarl.acl.message.Performative
import io.sarl.acl.protocol.AclProtocolId
import io.sarl.acl.protocol.propose.InitiatorFipaProposeProtocol
import io.sarl.acl.protocol.propose.ProposeProtocolState
import io.sarl.acl.tests.protocol.AbstractAclProtocolTest
import io.sarl.api.util.SequenceListenerNotifier
import io.sarl.api.util.SmartListenerCollection
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("InitiatorFipaProposeProtocol")
class InitiatorFipaProposeProtocolTest extends AbstractAclProtocolTest {

	var participant : UUID

	var protocol : InitiatorFipaProposeProtocol

	@BeforeEach
	override setUp : void {
		super.setUp
		this.participant = UUID::randomUUID
		this.protocol = new InitiatorFipaProposeProtocol(this.^agent)
		this.protocol.concurrentCollectionFactory = [new SmartListenerCollection(new SequenceListenerNotifier)]
	}

	def initiateProtocol(testAfterPropose : boolean = true) : Object {
		this.protocol.init
		val proposeData = typeof(Object).mock

		ProposeProtocolState::NOT_STARTED.assertSame(this.protocol.state)

		this.protocol.propose(this.participant, proposeData)

		if (testAfterPropose) {
			ProposeProtocolState::WAITING_ANSWER.assertSame(this.protocol.state)
			assertReceivedAclMessage(Performative::PROPOSE, proposeData)
			this.protocol.assertChanged
		}

		return proposeData
	}

	@Test
	@DisplayName("valid sequence with accept")
	def validSequenceWithAccept : void {
		initiateProtocol
		
		var answerData = typeof(Object).mock
		this.protocol.fireEvent(Performative::ACCEPT_PROPOSAL, this.participant, AclProtocolId::FIPA_PROPOSE.code, answerData)

		ProposeProtocolState::ACCEPT_PROPOSE.assertSame(this.protocol.state)
		
		this.protocol.answer.assertProtocolResult(Performative::ACCEPT_PROPOSAL, this.participant, answerData)
		this.protocol.assertFinished
	}

	@Test
	@DisplayName("valid sequence with reject")
	def validSequenceWithReject : void {
		initiateProtocol
	
		var answerData = typeof(Object).mock	
		this.protocol.fireEvent(Performative::REJECT_PROPOSAL, this.participant, AclProtocolId::FIPA_PROPOSE.code, answerData)

		ProposeProtocolState::REJECT_PROPOSE.assertSame(this.protocol.state)
		
		this.protocol.answer.assertProtocolResult(Performative::REJECT_PROPOSAL, this.participant, answerData)
		this.protocol.assertFinished
	}

	@Test
	@DisplayName("invalid performative")
	def invalidPerformative : void {
		initiateProtocol
		val ex = typeof(TestProtocolError).assertException [
			this.protocol.fireEvent(Performative::AGREE, this.participant, AclProtocolId::FIPA_PROPOSE.code, typeof(Object).mock)
		]
		"Unexpected performative AGREE".assertInside(ex.message)
		this.protocol.assertFailed
		this.protocol.assertNotFinished
	}

	@Test
	@DisplayName("timeout")
	def timeout : void {
		this.protocol.assertTimeout [
			initiateProtocol(false)
		]
		this.protocol.assertFailed
	}

}
