/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2017 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.acl.encoding.string

import io.sarl.acl.message.Performative
import java.util.List
import java.util.regex.Pattern

/** 
 * Helper used to parse and rebuild the decoded {@link ACLMessageContent}.
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $Groupid$
 * @mavenartifactid $ArtifactId$
 */
final class StringACLCodecHelper {

	new {
	}

	static val PERFORMATIVE_PATTERN = "(\\()(.*)"
	static val PERFORMATIVE_GROUP = 2

	static val SENDER_PATTERN = "(:sender)(\\s+)(\\()(\\s*)(agent-identifier)(\\s+)(:name)(\\s+)([a-zA-Z0-9_-]+)(\\s*)(\\))"
	static val SENDER_GROUP = 9

	static val RECEIVER_PATTERN = "(:receiver)(\\s+)(\\()(\\s+)(set)(\\s+)(.*)(\\s*)(\\))"
	//static val RECEIVER_GROUP = 7

	static val RECEIVER_ITEM_PATTERN = "(\\()(\\s*)(agent-identifier)(\\s+)(:name)(\\s+)([a-zA-Z0-9_-]+)(\\s*)(\\))"
	static val RECEIVER_ITEM_GROUP = 7

	static val CONTENT_PATTERN = "(:content)(\\s+)(\\\")(.*)(\\\")(\\s*)"
	static val CONTENT_GROUP = 4

	static val ENCODING_PATTERN = "(:encoding)(\\s+)(.*)(\\s*)"
	static val ENCODING_GROUP = 3

	static val LANGUAGE_PATTERN = "(:language)(\\s+)(.*)(\\s*)"
	static val LANGUAGE_GROUP = 3

	static val ONTOLOGY_PATTERN = "(:ontology)(\\s+)(.*)(\\s*)"
	static val ONTOLOGY_GROUP = 3

	static val PROTOCOL_PATTERN = "(:protocol)(\\s+)(.*)(\\s*)"
	static val PROTOCOL_GROUP = 3

	static val CONVERSATION_ID_PATTERN = "(:conversation-id)(\\s+)(.*)(\\s*)"
	static val CONVERSATION_ID_GROUP = 3

	static val UUID_PATTERN = "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
	
	/**
	 * @param str
	 * @return true if the specified string is a performative, false otherwise
	 */
	static def isPerformative(str : String) : boolean {
		doesPatternMatch(str, PERFORMATIVE_PATTERN)
	}

	/** 
	 * @param str
	 * @return the performative contained in the specified string
	 */
	static def getPerformative(str : String) : Performative {
		Performative::valueOf(getMatch(str, PERFORMATIVE_PATTERN, PERFORMATIVE_GROUP))
	}

	/** 
	 * @param str
	 * @return true if the specified string corresponds to a sender pattern, false otherwise
	 */
	static def isSender(str : String) : boolean {
		doesPatternMatch(str, SENDER_PATTERN)
	}

	/** 
	 * @param str
	 * @return the sender contained in the specified string
	 */
	static def getSender(str : String) : String {
		getMatch(str, SENDER_PATTERN, SENDER_GROUP)
	}

	/** 
	 * @param str
	 * @return true if the specified string corresponds to a receiver pattern, false otherwise
	 */
	static def isReceiver(str : String) : boolean {
		doesPatternMatch(str, RECEIVER_PATTERN)
	}
	
	/** 
	 * @param str
	 * @return the receiver list contained in the specified string
	 */
	static def getReceiversList(str : String) : List<String> {
		getMatches(str, RECEIVER_ITEM_PATTERN, RECEIVER_ITEM_GROUP)
	}

	/** 
	 * @param str
	 * @return  true if the specified string is a message content, false otherwise
	 */
	static def isContent(str : String) : boolean {
		doesPatternMatch(str, CONTENT_PATTERN)
	}

	/** 
	 * @param str
	 * @return the message content contained in the specified string
	 */
	static def getContent(str : String) : String {
		getMatch(str, CONTENT_PATTERN, CONTENT_GROUP)
	}

	/** 
	 * @param str
	 * @return  true if the specified string is an encosing specification, false otherwise
	 */
	static def isEncoding(str : String) : boolean {
		doesPatternMatch(str, ENCODING_PATTERN)
	}

	/** 
	 * @param str
	 * @return the encoding descriptor contained in the specified string
	 */
	static def getEncoding(str : String) : String {
		getMatch(str, ENCODING_PATTERN, ENCODING_GROUP)
	}

	/** 
	 * @param str
	 * @return  true if the specified string is a language descriptor, false otherwise
	 */
	static def isLanguage(str : String) : boolean {
		doesPatternMatch(str, LANGUAGE_PATTERN)
	}

	/** 
	 * @param str
	 * @return the language descriptor contained in the specified string
	 */
	static def getLanguage(str : String) : String {
		getMatch(str, LANGUAGE_PATTERN, LANGUAGE_GROUP)
	}

	/** 
	 * @param str
	 * @return  true if the specified string is an ontology descriptor, false otherwise
	 */
	static def isOntology(str : String) : boolean {
		doesPatternMatch(str, ONTOLOGY_PATTERN)
	}

	/** 
	 * @param str
	 * @return the ontology descriptor contained in the specified string
	 */
	static def getOntology(str : String) : String {
		getMatch(str, ONTOLOGY_PATTERN, ONTOLOGY_GROUP)
	}

	/** 
	 * @param str
	 * @return  true if the specified string is a protocol descriptor, false otherwise
	 */
	static def isProtocol(str : String) : boolean {
		doesPatternMatch(str, PROTOCOL_PATTERN)
	}

	/** 
	 * @param str
	 * @return the protocol descriptor contained in the specified string
	 */
	static def getProtocol(str : String) : String {
		getMatch(str, PROTOCOL_PATTERN, PROTOCOL_GROUP)
	}

	/** 
	 * @param str
	 * @return  true if the specified string is a conversation id, false otherwise
	 */
	static def isConversationId(str : String) : boolean {
		doesPatternMatch(str, CONVERSATION_ID_PATTERN)
	}

	/** 
	 * @param str
	 * @return the conversation id contained in the specified string
	 */
	static def getConversationId(str : String) : String {
		getMatch(str, CONVERSATION_ID_PATTERN, CONVERSATION_ID_GROUP)
	}

	/** 
	 * @param str
	 * @return  true if the specified string is an UUID, false otherwise
	 */
	static def isUUID(str : String) : boolean {
		doesPatternMatch( str, UUID_PATTERN)
	}

	private static def doesPatternMatch(str : String, pattern : String) : boolean {
		return Pattern::compile(pattern).matcher(str).matches
	}

	private static def getMatch(str : String, pattern : String, group : int) : String {
		var m = Pattern::compile(pattern).matcher(str)
		m.find
		var result = m.group(group)		
		if (result == "null") null else result
	}

	private static def getMatches(str : String, pattern : String, group : int) : List<String> {
		var m = Pattern::compile(pattern).matcher(str)
		var list = <String>newArrayList
		while (m.find) {
		    list += m.group(group)
		}
		return list
	}

}
