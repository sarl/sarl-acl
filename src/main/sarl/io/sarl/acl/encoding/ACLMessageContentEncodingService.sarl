/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2017 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.acl.encoding

import io.sarl.acl.message.ACLMessage
import io.sarl.acl.message.ACLMessageContent
import io.sarl.acl.message.ACLMessageContentFactory

/** 
 * This interface describes the EncodingService which encodes the ACLMessageContent
 * of an ACLMessage
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $Groupid$
 * @mavenartifactid $ArtifactId$
 */
interface ACLMessageContentEncodingService {

	/** 
	 * This method encodes the ACLMessageContent of an ACLMessage in the matching type
	 * 
	 * @param aMsg the ACLMessage containing the ACLMessageContent
	 * @return the ACLMessageContent encoded
	 */
    def encode(aMsg : ACLMessage) : byte[]
    
    /**
     * This method decodes the ACLMessageContent of an ACLMessage encoded in the matching type
     * 
     * @param byteMsg the ACLMessage encoded in byte array (payload)
     * @param parameters
     * @return the ACLMessageContent decoded
     */
    def decode(byteMsg : byte[], parameters : Object*) : ACLMessageContent

}

/** 
 * Abstract implementation of a message content encoding service.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $Groupid$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractACLMessageContentEncodingService implements ACLMessageContentEncodingService {

	var contentFactory : ACLMessageContentFactory

	def getMessageContentFactory : ACLMessageContentFactory {
		if (this.contentFactory === null) {
			this.contentFactory = new ACLMessage.ContentFactory
		}
		this.contentFactory
	}

	def setMessageContentFactory(factory : ACLMessageContentFactory) {
		this.contentFactory = factory
	}

}
