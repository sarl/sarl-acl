/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.protocol

import io.sarl.acl.manager.ConversationManager
import io.sarl.acl.message.AclMessage
import io.sarl.acl.message.Performative
import io.sarl.acl.routing.ACL
import io.sarl.core.AgentTask
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.core.Time
import io.sarl.lang.core.Agent
import io.sarl.util.ConcurrentCollection
import io.sarl.util.ConcurrentCollectionLinkedDeque
import java.lang.ref.WeakReference
import java.text.MessageFormat
import java.util.Collection
import java.util.Objects
import java.util.UUID
import java.util.concurrent.locks.ReentrantReadWriteLock
import org.eclipse.xtend.lib.annotations.Accessors
import org.eclipse.xtext.xbase.lib.util.ToStringBuilder

/** 
 * This abstract class describes all the necessary information common to every ACL protocols.
 * 
 * @author $Author: sgalland$
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
abstract behavior AclProtocol {

	uses Logging, ACL, Time, Schedules

	/** Lock for the behavior. */
	protected val lock = new ReentrantReadWriteLock

	var timeoutListeners : ConcurrentCollection<AclProtocolTimeoutListener>

	var conversationManager : WeakReference<ConversationManager>

	/** Invoked when the protocol is installed into the conversation manager. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def install(manager : ConversationManager) {
		var wlock = this.lock.writeLock
		wlock.lock
		try {
			this.conversationManager = new WeakReference(manager)
		} finally {
			wlock.unlock
		}
	}

	/** Invoked when the protocol is uninstalled from the conversation manager. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def uninstall(manager : ConversationManager) {
		var wlock = this.lock.writeLock
		wlock.lock
		try {
			this.conversationManager = null
		} finally {
			wlock.unlock
		}
	}

	/** Add a listener on protocol's timeout. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def addTimeoutListener(listener : AclProtocolTimeoutListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.timeoutListeners === null) {
				this.timeoutListeners = new ConcurrentCollectionLinkedDeque
			}
			this.timeoutListeners += listener
		} finally {
			wlock.unlock
		}
	}

	/** Replies the conversation manager in which this protocol is stored.
	 *
	 * @return the conversation manager, or {@code null} if this protocol is not associated to a manager.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	def getConversationManager : ConversationManager {
		var rlock = this.lock.readLock
		rlock.lock
		try {
			return this.conversationManager?.get
		} finally {
			rlock.unlock
		}
	}

	/** Remove a listener on protocol's timeout. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def removeTimeoutListener(listener : AclProtocolTimeoutListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.timeoutListeners !== null) {
				this.timeoutListeners.remove(listener)
				if (this.timeoutListeners.empty) {
					this.timeoutListeners = null
				}
			}
		} finally {
			wlock.unlock
		}
	}

	/** Notify timeout listeners.
	 * This function is not thread-safe.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected def notifyTimeout : void {
		if (this.timeoutListeners !== null) {
			val list = <AclProtocolTimeoutListener>newArrayList(this.timeoutListeners)
			for (listener : list) {
				listener.timeoutReached(this)
			}
		}
	}

	var endListeners : ConcurrentCollection<AclProtocolFinishingListener>

	/** Add a listener on protocol's finishing. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def addFinishingListener(listener : AclProtocolFinishingListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.endListeners === null) {
				this.endListeners = new ConcurrentCollectionLinkedDeque
			}
			this.endListeners += listener
		} finally {
			wlock.unlock
		}
	}

	/** Remove a listener on protocol's finishing. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def removeFinishingListener(listener : AclProtocolFinishingListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.endListeners !== null) {
				this.endListeners.remove(listener)
				if (this.endListeners.empty) {
					this.endListeners = null
				}
			}
		} finally {
			wlock.unlock
		}
	}

	/** Notify finished (not time-out).
	 * This function is not thread-safe.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected def notifyFinished(^event : AbstractAclProtocolEvent) : void {
		if (this.endListeners !== null) {
			val list = <AclProtocolFinishingListener>newArrayList(this.endListeners)
			for (listener : list) {
				listener.protocolFinished(this, ^event)
			}
		}
	}

	var changeListeners : ConcurrentCollection<AclProtocolChangeListener>

	/** Add a listener on protocol's changes. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def addChangeListener(listener : AclProtocolChangeListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.changeListeners === null) {
				this.changeListeners = new ConcurrentCollectionLinkedDeque
			}
			this.changeListeners += listener
		} finally {
			wlock.unlock
		}
	}

	/** Remove a listener on protocol's change. */
	@SuppressWarnings("potential_field_synchronization_problem")
	def removeChangeListener(listener : AclProtocolChangeListener) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (this.changeListeners !== null) {
				this.changeListeners.remove(listener)
				if (this.changeListeners.empty) {
					this.changeListeners = null
				}
			}
		} finally {
			wlock.unlock
		}
	}

	/** Notify change (not finishing and not time-out).
	 * This function is not thread-safe.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected def notifyChange(^event : AbstractAclProtocolEvent) : void {
		if (this.changeListeners !== null) {
			val list = <AclProtocolChangeListener>newArrayList(this.changeListeners)
			for (listener : list) {
				listener.protocolChanged(this, ^event)
			}
		}
	}

	/**
	 * Friendly name for the conversation.
	 */
	@Accessors
	var name : String
	
	/**
	 * Address of the agent that initiated the protocol.
	 */
	protected var initiator : UUID

	/**
	 * Unique identifier used to identify the conversation and transmitted into the ACL Messages.
	 * The setter function is not thread-safe.
	 */
	protected var conversationId : UUID

	/**
	 * Return the unique identifier used to identify the conversation and transmitted into the ACL Messages.
	 */
	def getConversationId : UUID {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			return this.conversationId
		} finally {
			rlock.unlock
		}
	}

	/**
	 * State of the agent for the current state.
	 * The setter function is not thread-safe.
	 */
	var state : ProtocolState
	
	/**
	 * Return the state of the agent for the current state.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	def getState : ProtocolState {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			return this.state
		} finally {
			rlock.unlock
		}
	}

	/**
	 * Number of errors.
	 * The setter function is not thread-safe.
	 */
	@Accessors(PROTECTED_SETTER)
	var numberOfErrors : int = 0

	/**
	 * Number of errors.
	 * The setter function is not thread-safe.
	 */
	def getNumberOfErrors : int {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			return this.numberOfErrors
		} finally {
			rlock.unlock
		}
	}

	/** 
	 * Tests if there is at least one error.
	 * @return {@code true} if there is at least one error in the protocol execution, {@code false} otherwise.
	 */
	@Pure
	def hasFailed : boolean {
		getNumberOfErrors > 0
	}

	/**
	 * Starting time is used to check if timeout is reached or not.
	 */
	protected var startingTime : double = Double::NaN

	/**
	 * The parallel task that is supporting the time out.
	 */
	protected var timeoutTask : AgentTask

	/**
	 * General timeout for the protocol.
	 */
	protected var timeout : double = ProtocolConstants::DEFAULT_TIMEOUT

	/** Constructor.
	 *
	 * @param ag the owner of the behavior.
	 * @param initiator the identifier of the initiator of the ACL protocol.
	 */
	new (ag : Agent, initiator : UUID = null) {
		super(ag)
		this.initiator = initiator
	}

	override toString(builder : ToStringBuilder) {
		var nm = getName
		if (nm.nullOrEmpty) {
			builder.add('fipaName', this.aclProtocolId.code)
		}
	}

	/** Replies the general timeout for this protocol.
	 *
	 * @return the timeout duration in seconds.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	def getTimeout : double {
		val rlock = this.lock.readLock
		rlock.lock
		try {
			return this.timeout
		} finally {
			rlock.unlock
		}
	}

	/** Change the general timeout for this protocol.
	 *
	 * <p>Please note that the change of the timeout must be done before the protocol is started.
	 * As soon as the protocol has started, all the changes of timeout will be ignored.
	 *
	 * @param timeout is the timeout duration in seconds. If it is lower or equal to zero, the default system timeout is applied.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	def setTimeout(timeout : double) {
		val wlock = this.lock.writeLock
		wlock.lock
		try {
			if (timeout <= 0.0) {
				this.timeout = ProtocolConstants::DEFAULT_TIMEOUT
			} else {
				this.timeout = timeout
			}
		} finally {
			wlock.unlock
		}
	}

	/** Replies the identifier of this protocol if it is a ACL standard protocol.
	 *
	 * @return the identifier or {@code FipaProtocolId#NONE} if the protocol is not a ACL protocol.
	 */
	abstract def getAclProtocolId : AclProtocolId

	/** Replies the identifier of this protocol if it is a ACL standard protocol.
	 *
	 * @return the identifier of the protocol.
	 */
	def getProtocolId : String {
		getAclProtocolId.getCode
	}

	/**
	 * Tests if the the protocol has started.
	 * 
	 * @return {@code true} if the protocol has been started, {@code false} otherwise.
	 */
	abstract def isStarted : boolean

	/**
	 * Tests if the currently referenced agent is a simple participant of the protocol.
	 * 
	 * @return {@code true} if the referenced agent is a participant or {@code false} otherwise.
	 */
	abstract def isParticipantSide : boolean

	/** 
	 * Tests if the currently referenced agent is the initiator of the protocol.
	 * 
	 * @return {@code true} if the referenced agent is the initiator or {@code false} otherwise.
	 */
	abstract def isInitiatorSide : boolean

	/**
	 * Gets the maximum number of participant excluding the initiator.
	 *
	 * @return the maximum number of participant excluding the initiator.
	 */
	abstract def getMaximumNumberOfParticipants : int

	/**
	 * Gets the list of participants involved in the conversation.
	 * 
	 * @return the list of participants.
	 */
	abstract def getParticipants : Collection<UUID>

	/** Replies the state representing a cancellation.
	 *
	 * @return the cancel state.
	 */
	protected abstract def getCancelledState : ProtocolState

	/** Replies the state representing an error.
	 *
	 * @return the error state.
	 */
	protected abstract def getErrorState : ProtocolState

	/**
	 * At any point in the IP, the initiator of the IP may cancel the
	 * interaction protocol.
	 * 
	 * <p>The semantics of cancel should roughly be interpreted as meaning that the
	 * initiator is no longer interested in continuing the interaction and that
	 * it should be terminated in a manner acceptable to both the Initiator and
	 * the Participant.
	 * 
	 * @param reason the reason of the cancel.
	 * @param event is the event to provide to the listener.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected def cancelProtocol(reason : Object, ^event : AbstractAclProtocolEvent) {
		if (isInitiatorSide && isStarted) {
			val rlock = this.lock.readLock
			rlock.lock
			var st : ProtocolState
			try {
				st = this.state
			} finally {
				rlock.unlock
			}
			if (!st.isErrorneous && !st.isFinished && !st.isBrokenProtocol && !st.isCancelled) {
				val wlock = this.lock.writeLock
				wlock.lock
				try {
					st = this.state
					if (!st.isErrorneous && !st.isFinished && !st.isBrokenProtocol && !st.isCancelled) {
						onCancelled
						finish(cancelledState, ^event)
						sendMessage(reason, Performative::CANCEL, participants)
					} else {
						reportError(MessageFormat::format(Messages::AclProtocol_6, state.name))
					}
				} finally {
					wlock.unlock
				}
			} else {
				reportError(MessageFormat::format(Messages::AclProtocol_6, state.name))
			}
		}
	}

	/** Invoked when the protocol is canceled */
	protected def onCancelled {
	}

	/**
	 * At any point in the IP, the receiver of a communication 
	 * can inform the sender that it did not understand what was communicated.
	 * 
	 * The communication of a not-understood within an interaction protocol may terminate the entire IP 
	 * and termination of the interaction may imply that any commitments made during the interaction 
	 * are null and void.
	 * 
	 * @param reason the reason of the cancel.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected def notUnderstoodProtocol(reason : Object) {
		if (isParticipantSide && isStarted) {
			val rlock = this.lock.readLock
			rlock.lock
			var st : ProtocolState
			try {
				st = this.state
			} finally {
				rlock.unlock
			}
			if (!st.isErrorneous && !st.isFinished && !st.isBrokenProtocol && !st.isCancelled) {
				val wlock = this.lock.writeLock
				wlock.lock
				try {
					st = this.state
					if (!st.isErrorneous && !st.isFinished && !st.isBrokenProtocol && !st.isCancelled) {
						reportError(MessageFormat::format(Messages::AclProtocol_8, Objects::toString(reason)))
						sendMessage(reason, Performative::NOT_UNDERSTOOD, this.initiator)
					} else {
						reportError(MessageFormat::format(Messages::AclProtocol_7, state.name))
					}
				} finally {
					wlock.unlock
				}
			} else {
				reportError(MessageFormat::format(Messages::AclProtocol_7, state.name))
			}
		}
	}

	/**
	 * Generates an error and terminates the conversation.
	 * This function is not thread-safe.
	 *
	 * @param msg the error message.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected final def reportError(msg : String) {
		this.state = getErrorState
		this.numberOfErrors ++
		MessageFormat::format(Messages::AclProtocol_0, getOwner, msg).error
	}

	/** Generates the an error related to the too high number of participants.
	 * This function is not thread-safe.
	 */
	protected final def reportTooManyParticipantError {
		reportError(MessageFormat::format(Messages::AclProtocol_1, maximumNumberOfParticipants))
	}

	/** Generates the an error related to a double initiator setting.
	 * This function is not thread-safe.
	 */
	protected final def reportTooManyInitiatorError {
		reportError(Messages::AclProtocol_2)
	}

	/** Generates the an error related to a participant that is already the initiator.
	 * This function is not thread-safe.
	 */
	protected final def reportParticipantIsAlreadyInitiatorError {
		reportError(Messages::AclProtocol_3)
	}

	/** Generates an error indicating that the performative is not expected.
	 */
	protected final def reportUnpexectedPerformativeError(performative : Performative) {
		reportError(MessageFormat::format(Messages::AclProtocol_5, performative.name))
	}

	/** Start the timeout notifier.
	 * This function is not thread-safe.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected def startTimeoutNotifier {
		if (Double::isNaN(this.startingTime)) {
			this.startingTime = getTime
			createTimeoutNotifier
		}
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	private def createTimeoutNotifier {
		this.timeoutTask = task(null)
		val tm = getTimeout
		this.timeoutTask.in(tm.seconds) [
			val wlock = AclProtocol.this.lock.writeLock
			wlock.lock
			try {
				reportTimeoutErrorAndStopNotifier
			} finally {
				wlock.unlock
			}
		]
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	private def resetTimeoutNotifier {
		if (this.timeoutTask !== null) {
			this.timeoutTask.cancel
			createTimeoutNotifier
		}
	}

	/** Generates the a timeout error and stop the time-out notifier.
	 * This function is not thread-safe.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected final def reportTimeoutErrorAndStopNotifier {
		if (this.timeoutTask !== null) {
			this.timeoutTask.cancel
			this.timeoutTask = null
		}
		reportError(Messages::AclProtocol_4)
		notifyTimeout
	}

	/** Finish the protocol on success.
	 * This function is not thread-safe.
	 *
	 * @param finalState set the final state for the protocol.
	 * @param event is the event to provide to the listeners.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected final def finish(finalState : ProtocolState, ^event : AbstractAclProtocolEvent) {
		if (this.timeoutTask !== null) {
			this.timeoutTask.cancel
			this.timeoutTask = null
		}
		this.state = finalState
		notifyFinished(^event)
	}

	/** Change protocol state.
	 * This function is not thread-safe.
	 *
	 * @param finalState set the final state for the protocol.
	 * @param event is the event to provide to the listener.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected final def change(newState : ProtocolState, ^event : AbstractAclProtocolEvent) {
		this.state = newState
		resetTimeoutNotifier
		notifyChange(^event)
	}

	/** Send a message and update the protocol start time.
	 * This function is not thread-safe.
	 *
	 * @param content the content of the message.
	 * @param performative the performative.
	 * @param to the destination.
	 */
	@SuppressWarnings("potential_field_synchronization_problem")
	protected final def sendMessage(content : Object, performative : Performative, to : UUID*) {
		var message = new AclMessage(performative, content)
		message.protocol = getAclProtocolId.code
		message.conversationId = this.conversationId		
		message.sendAclMessageTo(to)
	}

}
