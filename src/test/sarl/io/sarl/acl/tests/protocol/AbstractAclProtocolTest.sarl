/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.protocol

import io.sarl.acl.message.AclMessage
import io.sarl.acl.message.Performative
import io.sarl.acl.protocol.AclProtocol
import io.sarl.acl.protocol.ProtocolResult
import io.sarl.acl.routing.ACL
import io.sarl.core.AgentTask
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.core.Time
import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Agent
import io.sarl.lang.core.IBehaviorGuardEvaluatorReceiver
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Skill
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.util.ConcurrentCollection
import io.sarl.util.ConcurrentCollectionLinkedDeque
import io.sarl.util.ConcurrentSet
import java.util.UUID
import java.util.concurrent.TimeUnit
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicInteger
import java.util.function.Supplier
import java.util.logging.Logger
import org.junit.ComparisonFailure
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.lang.core.SREutils.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("AbstractAclProtocol")
abstract class AbstractAclProtocolTest {

	protected var ^agent : MockableAgent

	protected var timeCapacity : MockableTimeSkill

	protected var schedulesCapacity : MockableSchedulesSkill

	protected var aclCapacity : MockableAclSkill

	protected var loggingCapacity : MockableLoggingSkill

	protected val sentMessages : ConcurrentCollection<AclMessage> = new ConcurrentCollectionLinkedDeque

	val finishs = new AtomicInteger(0)

	val changes = new AtomicInteger(0)

	@PrivateAPI(isCallerOnly = true)
	@SuppressWarnings("use_reserved_sarl_annotation")
	@BeforeEach
	def setUp : void {
		this.^agent = new MockableAgent
		this.timeCapacity = new MockableTimeSkill
		SREutils::setInternalSkill(this.^agent, this.timeCapacity, #[typeof(Time)])
		this.schedulesCapacity = new MockableSchedulesSkill
		SREutils::setInternalSkill(this.^agent, this.schedulesCapacity, #[typeof(Schedules)])
		this.aclCapacity = new MockableAclSkill(this.sentMessages)
		SREutils::setInternalSkill(this.^agent, this.aclCapacity, #[typeof(ACL)])
		this.loggingCapacity = new MockableLoggingSkill
		SREutils::setInternalSkill(this.^agent, this.loggingCapacity, #[typeof(Logging)])
	}

	/** Initialize the protocol.
	 *
	 * @param protocol the protocol to be initialized
	 */
	protected def init(protocol : AclProtocol) {
		this.finishs.set(0)
		this.changes.set(0)
		protocol.addFinishingListener [
			this.finishs.incrementAndGet
		]
		protocol.addChangeListener [
			this.changes.incrementAndGet
		]
	}

	/** Check if the given protocol is marked as finished.
	 *
	 * @param protocol the protocol to be initialized
	 */
	protected def assertFinished(protocol : AclProtocol) {
		1.assertEquals(this.finishs.get) ["Expecting finished protocol: " + protocol]
	}

	/** Check if the given protocol is not marked as finished.
	 *
	 * @param protocol the protocol to be initialized
	 */
	protected def assertNotFinished(protocol : AclProtocol) {
		0.assertEquals(this.finishs.get) ["Expecting not finished protocol: " + protocol]
	}

	/** Check if the given protocol has changed.
	 *
	 * @param protocol the protocol to be checked
	 */
	protected def assertChanged(protocol : AclProtocol) {
		1.assertEquals(this.changes.getAndDecrement) ["Expecting changed protocol: " + protocol]
	}

	/** Check if the given protocol is marked as finished.
	 *
	 * @param protocol the protocol to be initialized
	 */
	protected def assertFailed(protocol : AclProtocol) {
		protocol.hasFailed.assertTrue
	}

	/** Fire the given ACL event into the given event receiver.
	 *
	 * @param target the target of the event.
	 * @param evt the event to fire into the {@code target}.
	 */
	@PrivateAPI(isCallerOnly = true)
	@SuppressWarnings("use_reserved_sarl_annotation")
	protected def fireEvent(target : IBehaviorGuardEvaluatorReceiver, evt : AclMessage) : void {
		val behaviorsMethodsToExecute = <Runnable>newArrayList
		target.doEvaluateBehaviorGuards(evt, behaviorsMethodsToExecute)
		1.assertEquals(behaviorsMethodsToExecute.size) [
			"Unexpected number of event handlers in type " + target.class.simpleName
		]
		behaviorsMethodsToExecute.get(0).run
	}

	/** Fire an ACL event with the given information into the given event receiver.
	 *
	 * @param target the target of the event.
	 * @param performative is the performative inside the ACL message.
	 * @param sender is the sender of the ACL message.
	 * @param protocol the ACL protocol
	 * @param content is the content inside the ACL message.
	 */
	protected def fireEvent(target : IBehaviorGuardEvaluatorReceiver, performative : Performative, sender : UUID,
			protocol : String, content : Object) : void {
		val msg = new AclMessage(performative, content)
		msg.sender = sender
		msg.protocol = protocol
		target.fireEvent(msg)
	}

	/** Check if an ACL message was fired and that has the given properties.
	 *
	 * <p>The received ACL messages are internally stored according to calls to the protocol functions.
	 *
	 * @param expectedPerformative is the expected performative inside the received ACL message.
	 * @param expectedData is the expected content inside the received ACL message.
	 */
	def assertReceivedAclMessage(expectedPerformative : Performative, expectedData : Object) : void {
		1.assertEquals(this.sentMessages.size)
		val msg = this.sentMessages.get(0)
		msg.assertNotNull
		this.sentMessages.remove(msg).assertTrue
		expectedPerformative.assertSame(msg.performative) ["Unexpected performative in ACL message"]
		expectedData.assertSame(msg.content.content) ["Unexpected content in ACL message"]
	}

	/** Check if the given protocol result contains the given data.
	 *
	 * @param result is the protocol result to test.
	 * @param expectedPerformative the expected performative inside the given result.
	 * @param expectedParticipant the expected participant inside the given result.
	 * @param expectedData the expected content inside the given result.
	 */
	def assertProtocolResult(result : ProtocolResult, expectedPerformative : Performative, expectedParticipant : UUID, expectedData : Object) : void {
		result.assertNotNull
		expectedPerformative.assertSame(result.performative)
		expectedParticipant.assertEquals(result.author)
		expectedData.assertSame(result.content)
	}

	/** Check if the given string is inside the other. */
	def assertInside(expected : String, actual : String) {
		val e = expected ?: ""
		val a = actual ?: ""
		if (!a.contains(e)) {
			throw new ComparisonFailure("Unexpected string content. Expecting: " + expected, expected, actual)
		}
	}

	/** Check the protocol goes to timeout.
	 *
	 * @param protocol is the protocol to test.
	 * @param failureTimeout is the duration to wait before fail.
	 * @param code is the code to run before waiting for a timeout.
	 */
	@SuppressWarnings("discouraged_reference")
	def assertTimeout(protocol : AclProtocol, failureTimeout : long = 2000l, code : Runnable) : void {
		val tm = new AtomicBoolean(false)
		this.loggingCapacity.fail = false
		this.schedulesCapacity.parallel = true
		protocol.addTimeoutListener [
			tm.set(true)
		]
		protocol.timeout = 1
		code.run
		val st = System::currentTimeMillis
		val et = st + Math::max(failureTimeout, 2000l)
		while (!tm.get && System::currentTimeMillis <= et) {
			Thread::yield
		}
		if (!tm.get) {
			fail("Expecting timeout")
		}
	}

	protected static class MockableAgent extends Agent {
		new {
			super(UUID::randomUUID, UUID::randomUUID)
		}
	}

	protected static class MockableTimeSkill extends Skill implements Time {
		def fromOSDuration(timeDuration : double) : double {
			throw new UnsupportedOperationException
		}
		def fromOSTime(timeValue : double) : double {
			throw new UnsupportedOperationException
		}
		def getOSTimeFactor : double {
			throw new UnsupportedOperationException
		}
		def getTime(timeUnit : TimeUnit = null) : double {
			return 123.456
		}
		def toOSDuration(timeDuration : double) : double {
			throw new UnsupportedOperationException
		}
		def toOSTime(timeValue : double) : double {
			throw new UnsupportedOperationException
		}
	}

	protected static class MockableSchedulesSkill extends Skill implements Schedules {
		public volatile var parallel : boolean = false
		def at(task : AgentTask = null, time : long, procedure : (Agent)=>void) : AgentTask {
			throw new UnsupportedOperationException
		}
		def atFixedDelay(task : AgentTask = null, delay : long, procedure : (Agent)=>void) : AgentTask {
			throw new UnsupportedOperationException
		}
		def cancel(task : AgentTask, mayInterruptIfRunning : boolean = true) : boolean {
			true
		}
		def every(task : AgentTask = null, period : long, procedure : (Agent)=>void) : AgentTask {
			throw new UnsupportedOperationException
		}
		def execute(task : AgentTask = null, procedure : (Agent)=>void) : AgentTask {
			throw new UnsupportedOperationException
		}
		def getActiveTasks : ConcurrentSet<String> {
			throw new UnsupportedOperationException
		}
		@SuppressWarnings("discouraged_reference")
		def in(task : AgentTask = null, delay : long, procedure : (Agent)=>void) : AgentTask {
			if (this.parallel) {
				val thread = new Thread [ procedure.apply(getOwner) ]
				thread.start
			}
			return task
		}
		def isCanceled(task : AgentTask) : boolean {
			throw new UnsupportedOperationException
		}
		def setName(task : AgentTask, name : String) {
			throw new UnsupportedOperationException
		}
		def task(name : String) : AgentTask {
			typeof(AgentTask).mock
		}
	}

	protected static class MockableAclSkill extends Skill implements ACL {
		val sentMessages : ConcurrentCollection<AclMessage>
		new (sentMessages : ConcurrentCollection<AclMessage>) {
			this.sentMessages = sentMessages
		}
		def sendAclMessageTo(message : AclMessage, agents : UUID*) {
			this.sentMessages.add(message)
		}
	}

	protected static class MockableLoggingSkill extends Skill implements Logging {
		public volatile var fail : boolean = true
		def debug(messageProvider : Supplier<String>) {
			throw new UnsupportedOperationException
		}
		def debug(message : Object, parameters : Object*) {
			throw new UnsupportedOperationException
		}
		def error(messageProvider : Supplier<String>) {
			if (this.fail) {
				throw new TestProtocolError(messageProvider.get)
			}
		}
		def error(message : Object, exception : Throwable = null, parameters : Object*) {
			if (this.fail) {
				throw new TestProtocolError(message.toString, exception)
			}
		}
		def getLogLevel : int {
			throw new UnsupportedOperationException
		}
		def getLogger : Logger {
			throw new UnsupportedOperationException
		}
		def info(messageProvider : Supplier<String>) {
			throw new UnsupportedOperationException
		}
		def info(message : Object, parameters : Object*) {
			throw new UnsupportedOperationException
		}
		def isDebugLogEnabled : boolean {
			throw new UnsupportedOperationException
		}
		def isErrorLogEnabled : boolean {
			throw new UnsupportedOperationException
		}
		def isInfoLogEnabled : boolean {
			throw new UnsupportedOperationException
		}
		def isWarningLogEnabled : boolean {
			throw new UnsupportedOperationException
		}
		def setLogLevel(level : int) {
			throw new UnsupportedOperationException
		}
		def setLoggingName(name : String) {
			throw new UnsupportedOperationException
		}
		def warning(messageProvider : Supplier<String>) {
			throw new UnsupportedOperationException
		}
		def warning(message : Object, exception : Throwable = null, parameters : Object*) {
			throw new UnsupportedOperationException
		}
		@Deprecated
		def println(message : Object) {
			throw new UnsupportedOperationException
		}
	}

	protected static class TestProtocolError extends Exception {
		//
	}

}
