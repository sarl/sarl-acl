/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.protocol.request

import io.sarl.acl.message.Performative
import io.sarl.acl.protocol.AclProtocolId
import io.sarl.acl.protocol.request.ParticipantFipaRequestProtocol
import io.sarl.acl.protocol.request.RequestProtocolState
import io.sarl.acl.tests.protocol.AbstractAclProtocolTest
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("ParticipantFipaRequestProtocol")
class ParticipantFipaRequestProtocolTest extends AbstractAclProtocolTest {

	var initiator : UUID

	var protocol : ParticipantFipaRequestProtocol

	@BeforeEach
	override setUp : void {
		super.setUp
		this.initiator = UUID::randomUUID
		this.protocol = new ParticipantFipaRequestProtocol(this.^agent)
	}

	def initiateProtocol(testAfterRequest : boolean = true) : Object {
		this.protocol.init
		val requestData = typeof(Object).mock

		RequestProtocolState::NOT_STARTED.assertSame(this.protocol.state)

		this.protocol.fireEvent(Performative::REQUEST, this.initiator, AclProtocolId::FIPA_REQUEST.code, requestData)

		RequestProtocolState::WAITING_PARTICIPANT_DECISION.assertSame(this.protocol.state)

		if (testAfterRequest) {
			this.protocol.request.assertProtocolResult(Performative::REQUEST, this.initiator, requestData)
			this.protocol.assertChanged
		}

		return requestData
	}

	@Test
	@DisplayName("refuse request")
	def refuseRequest : void {
		initiateProtocol

		var refuseData = typeof(Object).mock
		this.protocol.refuse(refuseData)

		RequestProtocolState::PARTICIPANT_REFUSED.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::REFUSE, refuseData)
		this.protocol.assertFinished
	}

	@Test
	@DisplayName("done with result")
	def doneWithResult : void {
		initiateProtocol

		var agreeData = typeof(Object).mock
		this.protocol.agree(agreeData)

		RequestProtocolState::PARTICIPANT_AGREED.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::AGREE, agreeData)

		var doneData = typeof(Object).mock
		this.protocol.done(doneData)

		RequestProtocolState::DONE_WITH_RESULT.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::INFORM, doneData)

		this.protocol.assertFinished
	}

	@Test
	@DisplayName("done with null result")
	def doneWithNullResult : void {
		initiateProtocol

		var agreeData = typeof(Object).mock
		this.protocol.agree(agreeData)

		RequestProtocolState::PARTICIPANT_AGREED.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::AGREE, agreeData)

		this.protocol.done(null)

		RequestProtocolState::DONE_WITHOUT_RESULT.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::INFORM, null)

		this.protocol.assertFinished
	}

	@Test
	@DisplayName("done without result")
	def doneWithoutResult : void {
		initiateProtocol

		var agreeData = typeof(Object).mock
		this.protocol.agree(agreeData)

		RequestProtocolState::PARTICIPANT_AGREED.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::AGREE, agreeData)

		this.protocol.done

		RequestProtocolState::DONE_WITHOUT_RESULT.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::INFORM, null)

		this.protocol.assertFinished
	}

	@Test
	@DisplayName("fails with reason")
	def failsWithReason : void {
		initiateProtocol

		var agreeData = typeof(Object).mock
		this.protocol.agree(agreeData)

		RequestProtocolState::PARTICIPANT_AGREED.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::AGREE, agreeData)

		var failData = typeof(Object).mock
		this.protocol.failure(failData)

		RequestProtocolState::PARTICIPANT_FAILURE.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::FAILURE, failData)

		this.protocol.assertFinished
	}

	@Test
	@DisplayName("fails with null reason")
	def failsWithNullReason : void {
		initiateProtocol

		var agreeData = typeof(Object).mock
		this.protocol.agree(agreeData)

		RequestProtocolState::PARTICIPANT_AGREED.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::AGREE, agreeData)

		this.protocol.failure(null)

		RequestProtocolState::PARTICIPANT_FAILURE.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::FAILURE, null)

		this.protocol.assertFinished
	}

	@Test
	@DisplayName("fails without reason")
	def failsWithoutReason : void {
		initiateProtocol

		var agreeData = typeof(Object).mock
		this.protocol.agree(agreeData)

		RequestProtocolState::PARTICIPANT_AGREED.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::AGREE, agreeData)

		this.protocol.failure

		RequestProtocolState::PARTICIPANT_FAILURE.assertSame(this.protocol.state)
		assertReceivedAclMessage(Performative::FAILURE, null)

		this.protocol.assertFinished
	}

	@Test
	@DisplayName("invalid performative")
	def invalidPerformative : void {
		initiateProtocol
		val ex = typeof(TestProtocolError).assertException [
			this.protocol.fireEvent(Performative::CFP, this.initiator, AclProtocolId::FIPA_REQUEST.code, typeof(Object).mock)
		]
		"Unexpected performative CFP".assertInside(ex.message)
		this.protocol.assertFailed
		this.protocol.assertNotFinished
	}

	@Test
	@DisplayName("timeout")
	def timeout : void {
		this.protocol.assertTimeout [
			initiateProtocol(false)
		]
		this.protocol.assertFailed
	}

}
