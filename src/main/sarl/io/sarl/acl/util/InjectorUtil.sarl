/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.util

import com.google.inject.ImplementedBy

/** 
 * Utilities related to the injectors.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
final class InjectorUtil {

	private new {}

	/** Get the {@link ImplementedBy} annotation to the given type in order to create an instance of the type.
	 *
	 * @param type the type to create an instance for.
	 * @param defaultInstanceType the type of instance if the given type is not annoted.
	 * @return the instance.
	 */
	static def newImplementedByInstance(type : Class<T>, defaultInstanceType : Class<? extends T>) : T with T {
		try {
			val annot = type.getAnnotation(typeof(ImplementedBy))
			if (annot !== null) {
				val instanceType = annot.value
				if (type.isAssignableFrom(instanceType)) {
					val cons = instanceType.constructor
					return type.cast(cons.newInstance)
				}
			}
			if (defaultInstanceType !== null) {
				val cons = defaultInstanceType.constructor
				return cons.newInstance
			}
		} catch (ex : Throwable) {
			//
		}
		return null;
	}

}
