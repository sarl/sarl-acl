/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.encoding.xml

import io.sarl.acl.encoding.AbstractAclMessageEnvelopeEncodingService
import io.sarl.acl.message.AclMessageEnvelope
import io.sarl.acl.message.AclRepresentation
import io.sarl.acl.util.Iso8601DateTimeUtil
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.io.PrintStream
import javax.xml.parsers.DocumentBuilderFactory

import static extension io.sarl.acl.encoding.xml.XmlAclCodecUtil.*

/** 
 * This class encodes an ACLMessageEnvelope in XML or decodes
 * an ACLMessageEnvelope encoded in XML
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class XmlEnvelopeCodec extends AbstractAclMessageEnvelopeEncodingService {

	override getAclRepresentation : AclRepresentation {
		AclRepresentation::XML
	}

	@SuppressWarnings("potential_inefficient_value_conversion")
	override encode(envelope : AclMessageEnvelope) : byte[] {
		val bstream = new ByteArrayOutputStream
		try {
			val stream = new PrintStream(bstream)
			stream.node(Messages::NODE_ENVELOPE, #{
				Messages::ATTR_FROM -> envelope.from,
				Messages::ATTR_ACLREPRESENTATION -> envelope.aclRepresentation,
				Messages::ATTR_DATE -> if (envelope.date !== null) Iso8601DateTimeUtil::format(envelope.date) else null,
				Messages::ATTR_COMMENTS -> envelope.comments,
				Messages::ATTR_PAYLOADLENGTH -> if (envelope.payloadLength !== 0) envelope.payloadLength as String else null,
				Messages::ATTR_PAYLOADENCODING -> envelope.payloadEncoding
			}) [
				for (uuid : envelope.to) {
					node(Messages::NODE_TO) [
						node(Messages::NODE_AGENTIDENTIFIER) [
							node(Messages::NODE_NAME, #{ Messages::ATTR_ID -> uuid })
						]
					]
				}
				for (uuid : envelope.intendedReceiver) {
					node(Messages::NODE_INTENDEDRECEIVER) [
						node(Messages::NODE_AGENTIDENTIFIER) [
							node(Messages::NODE_NAME, #{ Messages::ATTR_ID -> uuid })
						]
					]
				}
				for (entry : envelope.transportBehaviour.entrySet) {
					node(Messages::NODE_TRANSPORTBEHAVIOR,
						#{ Messages::ATTR_ID -> entry.key.toString},
						entry.value.toString)
				}
			]
		} finally {
			bstream.close
		}
        return bstream.toByteArray
	}

	override decode(encodedEnvelope : byte[], startIndex : int, endIndex : int) : AclMessageEnvelope {
		val correction = encodedEnvelope.validateIndexes(startIndex, endIndex)
		val startIdx = correction.key as int
		val endIdx = correction.value as int
		val envelope = this.envelopeFactory.newEnvelope
		
		val factory = DocumentBuilderFactory::newInstance
		val builder = factory.newDocumentBuilder
		try (var stream = new ByteArrayInputStream(encodedEnvelope, startIdx, endIdx - startIdx)) {
			val document = builder.parse(stream)
			val rootNode = document.findNode(Messages::NODE_ENVELOPE)
			var from = rootNode.uuid(Messages::ATTR_FROM)
			if (from !== null) {
				envelope.from = from
			}
			var aclRepresentation = rootNode.attribute(Messages::ATTR_ACLREPRESENTATION)
			if (!aclRepresentation.isNullOrEmpty) {
				envelope.aclRepresentation = aclRepresentation
			}
			var date = rootNode.date(Messages::ATTR_DATE)
			if (date !== null) {
				envelope.date = date
			}
			var comments = rootNode.attribute(Messages::ATTR_COMMENTS)
			if (!comments.isNullOrEmpty) {
				envelope.comments = comments
			}
			var payloadLength = rootNode.integer(Messages::ATTR_PAYLOADLENGTH)
			if (payloadLength !== 0) {
				envelope.payloadLength = payloadLength
			}
			var payloadEncoding = rootNode.attribute(Messages::ATTR_PAYLOADENCODING)
			if (!payloadEncoding.isNullOrEmpty) {
				envelope.payloadEncoding = payloadEncoding
			}

			val rootChildren = rootNode.childNodes
			val nbChildren = rootChildren.length
			for (var i = 0; i < nbChildren; i++) {
				val child = rootChildren.item(i)
				val name = child.nodeName
				switch (name) {
					case Messages::NODE_TO: {
						val uuid = child.identifier
						if (uuid !== null) {
							var list = envelope.to
							if (list === null) {
								list = newArrayList
								envelope.to = list
							}
							list += uuid
						}
					}
					case Messages::NODE_INTENDEDRECEIVER: {
						val uuid = child.identifier
						if (uuid !== null) {
							var list = envelope.intendedReceiver
							if (list === null) {
								list = newArrayList
								envelope.intendedReceiver = list
							}
							list += uuid
						}
					}
					case Messages::NODE_TRANSPORTBEHAVIOR: {
						val key = child.attribute(Messages::ATTR_ID)
						if (!key.isNullOrEmpty) {
							val value = child.text
							if (!value.isNullOrEmpty) {
								var map = envelope.transportBehaviour
								if (map === null) {
									map = newHashMap
									envelope.transportBehaviour = map
								}
								map.put(key, value)
							}
						}
					}
				} // switch
			}

		}

		return envelope
	}

}
