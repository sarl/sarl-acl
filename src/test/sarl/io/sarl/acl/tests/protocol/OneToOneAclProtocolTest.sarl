/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.protocol

import io.sarl.acl.protocol.AclProtocolId
import io.sarl.acl.protocol.OneToOneAclProtocol
import io.sarl.acl.protocol.ProtocolState
import io.sarl.lang.core.Agent
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("OneToOneAclProtocol")
class OneToOneAclProtocolTest {

	var ^agent : MockableAgent

	var protocol : MockableOneToOneAclProtocol

	@BeforeEach
	def setUp : void {
		this.^agent = new MockableAgent
		this.protocol = new MockableOneToOneAclProtocol(this.^agent)
	}

	@Test
	def getMaximumNumberOfParticipants : void {
		1.assertEquals(this.protocol.maximumNumberOfParticipants)
	}

	@Test
	@DisplayName("getParticipant - initiator")
	def getParticipant_initiator : void {
		val expected = UUID::randomUUID
		this.protocol.initiateAsInitiator(expected)
		val actual = this.protocol.participant
		expected.assertEquals(actual)
	}

	@Test
	@DisplayName("getParticipant - participant")
	def getParticipant_participant : void {
		this.protocol.initiateAsParticipant
		val actual = this.protocol.participant
		this.^agent.ID.assertEquals(actual)
	}

	@Test
	@DisplayName("getParticipants - initiator")
	def getParticipants_initiator : void {
		val expected = UUID::randomUUID
		this.protocol.initiateAsInitiator(expected)
		val list = this.protocol.getParticipants
		list.assertContainsCollection(#[expected])
	}

	@Test
	@DisplayName("getParticipants - participant")
	def getParticipants_participant : void {
		this.protocol.initiateAsParticipant
		val list = this.protocol.getParticipants
		list.assertContainsCollection(#[this.^agent.ID])
	}

	static class MockableAgent extends Agent {
		new {
			super(UUID::randomUUID, UUID::randomUUID)
		}
	}

	static class MockableOneToOneAclProtocol extends OneToOneAclProtocol {
		override initiateAsInitiator(participant : UUID) {
			super.initiateAsInitiator(participant)
		}
		override initiateAsParticipant {
			super.initiateAsParticipant
		}
		def getAclProtocolId : AclProtocolId {
			throw new UnsupportedOperationException
		}
		protected def getCancelledState : ProtocolState {
			throw new UnsupportedOperationException
		}
		protected def getErrorState : ProtocolState {
			throw new UnsupportedOperationException
		}
		def isStarted : boolean {
			throw new UnsupportedOperationException
		}
		def isParticipantSide : boolean {
			throw new UnsupportedOperationException
		}
		def isInitiatorSide : boolean {
			throw new UnsupportedOperationException
		}
	}

}
