/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, BinaryString 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.encoding.bitefficient.constant

import io.sarl.acl.encoding.bitefficient.constant.BinaryString
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.HashSet
import java.util.Set
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("BinaryString")
class BinaryStringTest {

	var constants : Set<BinaryString>

	@BeforeEach
	def setup : void {
		this.constants = new HashSet(BinaryString::values)
	}

	private def assertNoMoreConstant : void {
		if (!this.constants.empty) {
			fail("Unexpected constants: " + this.constants)
		}
	}

	private def consume(in : BinaryString) : BinaryString {
		this.constants.remove(in)
		return in
	}

	@Test
	def getBinaryCode : void {
		(0x14 as byte).assertEquals(BinaryString::STRING_BEGIN.consume.binaryCode)
		(0x00 as byte).assertEquals(BinaryString::STRING_END.consume.binaryCode)
		(0x15 as byte).assertEquals(BinaryString::INDEX_STRING_BEGIN.consume.binaryCode)
		(0x16 as byte).assertEquals(BinaryString::LEN8_BYTE_SEQ_BEGIN.consume.binaryCode)
		(0x17 as byte).assertEquals(BinaryString::LEN16_BYTE_SEQ_BEGIN.consume.binaryCode)
		(0x18 as byte).assertEquals(BinaryString::INDEX_BYTE_LENGTH_ENCODED_BEGIN.consume.binaryCode)
		(0x19 as byte).assertEquals(BinaryString::LEN32_BYTE_SEQ_BEGIN.consume.binaryCode)
	
		assertNoMoreConstant
	}

	@Test
	def toJsonString : void {
		"string_begin".assertEquals(BinaryString::STRING_BEGIN.consume.toJsonString)
		"string_end".assertEquals(BinaryString::STRING_END.consume.toJsonString)
		"index_string_begin".assertEquals(BinaryString::INDEX_STRING_BEGIN.consume.toJsonString)
		"len8_byte_seq_begin".assertEquals(BinaryString::LEN8_BYTE_SEQ_BEGIN.consume.toJsonString)
		"len16_byte_seq_begin".assertEquals(BinaryString::LEN16_BYTE_SEQ_BEGIN.consume.toJsonString)
		"index_byte_length_encoded_begin".assertEquals(BinaryString::INDEX_BYTE_LENGTH_ENCODED_BEGIN.consume.toJsonString)
		"len32_byte_seq_begin".assertEquals(BinaryString::LEN32_BYTE_SEQ_BEGIN.consume.toJsonString)
		assertNoMoreConstant
	}

	@Test
	@DisplayName("valueOfCaseInsensitive with valid argument")
	def valueOfCaseInsensitive_validArgument : void {
		BinaryString::STRING_BEGIN.consume.assertSame(BinaryString::valueOfCaseInsensitive("string_begin"))
		BinaryString::STRING_BEGIN.assertSame(BinaryString::valueOfCaseInsensitive("String_Begin"))

		BinaryString::STRING_END.consume.assertSame(BinaryString::valueOfCaseInsensitive("string_end"))
		BinaryString::STRING_END.assertSame(BinaryString::valueOfCaseInsensitive("String_End"))

		BinaryString::INDEX_STRING_BEGIN.consume.assertSame(BinaryString::valueOfCaseInsensitive("index_string_begin"))
		BinaryString::INDEX_STRING_BEGIN.assertSame(BinaryString::valueOfCaseInsensitive("Index_String_Begin"))

		BinaryString::LEN8_BYTE_SEQ_BEGIN.consume.assertSame(BinaryString::valueOfCaseInsensitive("len8_byte_seq_begin"))
		BinaryString::LEN8_BYTE_SEQ_BEGIN.assertSame(BinaryString::valueOfCaseInsensitive("Len8_Byte_Seq_Begin"))

		BinaryString::LEN16_BYTE_SEQ_BEGIN.consume.assertSame(BinaryString::valueOfCaseInsensitive("len16_byte_seq_begin"))
		BinaryString::LEN16_BYTE_SEQ_BEGIN.assertSame(BinaryString::valueOfCaseInsensitive("Len16_Byte_Seq_Begin"))

		BinaryString::INDEX_BYTE_LENGTH_ENCODED_BEGIN.consume.assertSame(BinaryString::valueOfCaseInsensitive("index_byte_length_encoded_begin"))
		BinaryString::INDEX_BYTE_LENGTH_ENCODED_BEGIN.assertSame(BinaryString::valueOfCaseInsensitive("Index_Byte_Length_Encoded_Begin"))

		BinaryString::LEN32_BYTE_SEQ_BEGIN.consume.assertSame(BinaryString::valueOfCaseInsensitive("len32_byte_seq_begin"))
		BinaryString::LEN32_BYTE_SEQ_BEGIN.assertSame(BinaryString::valueOfCaseInsensitive("Len32_Byte_Seq_Begin"))

		assertNoMoreConstant
	}

	@Test
	@DisplayName("valueOfCaseInsensitive with invalid argument")
	@SuppressWarnings("unused_local_variable")
	def valueOfCaseemptyArgument_invalidArgument : void {
		typeof(NullPointerException).assertException [
			var x = BinaryString::valueOfCaseInsensitive(null)
		]
		typeof(NullPointerException).assertException [
			var x = BinaryString::valueOfCaseInsensitive("")
		]
		typeof(IllegalArgumentException).assertException [
			var x = BinaryString::valueOfCaseInsensitive("abc")
		]
	}

	@Test
	def getJsonLabels : void {
		("string_begin, string_end, index_string_begin, len8_byte_seq_begin, "
		+ "len16_byte_seq_begin, index_byte_length_encoded_begin, "
		+ "len32_byte_seq_begin").assertEquals(BinaryString::jsonLabels)
	}

}
