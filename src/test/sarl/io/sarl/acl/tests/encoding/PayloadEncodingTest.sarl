/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.tests.encoding

import io.sarl.acl.encoding.PayloadEncoding
import io.sarl.lang.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import java.util.HashSet
import java.util.Set
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@Tag("acl")
@Tag("unit")
@DisplayName("PayloadEncoding")
class PayloadEncodingTest {

	var constants : Set<PayloadEncoding>

	@BeforeEach
	def setup : void {
		this.constants = new HashSet(PayloadEncoding::values)
	}

	private def assertNoMoreConstant : void {
		if (!this.constants.empty) {
			fail("Unexpected constants: " + this.constants)
		}
	}

	private def consume(in : PayloadEncoding) : PayloadEncoding {
		this.constants.remove(in)
		return in
	}

	@Test
	def getDefault : void {
		PayloadEncoding::UTF8.assertSame(PayloadEncoding::getDefault)
	}

	@Test
	def toJsonString : void {
		"utf8".assertEquals(PayloadEncoding::UTF8.consume.toJsonString)
		"utf16".assertEquals(PayloadEncoding::UTF16.consume.toJsonString)
		assertNoMoreConstant
	}

	@Test
	def getCode : void {
		"UTF-8".assertEquals(PayloadEncoding::UTF8.consume.code)
		"UTF-16".assertEquals(PayloadEncoding::UTF16.consume.code)
		assertNoMoreConstant
	}

	@Test
	@DisplayName("valueOfCaseInsensitive with valid argument")
	def valueOfCaseInsensitive_validArgument : void {
		PayloadEncoding::UTF8.consume.assertSame(PayloadEncoding::valueOfCaseInsensitive("Utf8"))
		PayloadEncoding::UTF8.assertSame(PayloadEncoding::valueOfCaseInsensitive("Utf-8"))
		PayloadEncoding::UTF16.consume.assertSame(PayloadEncoding::valueOfCaseInsensitive("Utf16"))
		PayloadEncoding::UTF16.assertSame(PayloadEncoding::valueOfCaseInsensitive("Utf-16"))
		assertNoMoreConstant
	}

	@Test
	@DisplayName("valueOfCaseInsensitive with invalid argument")
	@SuppressWarnings("unused_local_variable")
	def valueOfCaseemptyArgument_invalidArgument : void {
		typeof(NullPointerException).assertException [
			var x = PayloadEncoding::valueOfCaseInsensitive(null)
		]
		typeof(NullPointerException).assertException [
			var x = PayloadEncoding::valueOfCaseInsensitive("")
		]
		typeof(IllegalArgumentException).assertException [
			var x = PayloadEncoding::valueOfCaseInsensitive("abc")
		]
	}

	
	@Test
	def getJsonLabels : void {
		"utf8, utf16".assertEquals(PayloadEncoding::jsonLabels)
	}

}
