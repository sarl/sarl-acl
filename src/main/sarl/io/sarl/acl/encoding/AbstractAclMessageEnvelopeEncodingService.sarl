/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.acl.encoding

import io.sarl.acl.message.AclMessage
import io.sarl.acl.message.AclMessageEnvelopeFactory
import javax.inject.Inject

/** 
 * Abstract implementation of a message envelope encoding service.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
abstract class AbstractAclMessageEnvelopeEncodingService extends AbstractAclMessageEncodingService implements AclMessageEnvelopeEncodingService {

	var envelopeFactory : AclMessageEnvelopeFactory

	/** Replies the envelope factory.
	 *
	 * @return the envelope factory.
	 */
	@Pure
	def getEnvelopeFactory : AclMessageEnvelopeFactory {
		if (this.envelopeFactory === null) {
			this.envelopeFactory = AclMessage::defaultCreateEnvelopeFactory
		}
		return this.envelopeFactory
	}

	/** Change the e,velope factory.
	 *
	 * @param factory the envelope factory.
	 */
	@Inject
	def setEnvelopeFactory(factory : AclMessageEnvelopeFactory) {
		this.envelopeFactory = factory
	}

}
